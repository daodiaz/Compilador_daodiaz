
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Apr 01 00:17:59 CEST 2021
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Apr 01 00:17:59 CEST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\062\002\000\002\002" +
    "\004\000\002\063\002\000\002\003\004\000\002\004\002" +
    "\000\002\005\007\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\007\003\000\002\010\016\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\004\000\002\013\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\025\003\000\002\025\004\000\002\064\002\000\002\016" +
    "\006\000\002\016\003\000\002\016\003\000\002\065\002" +
    "\000\002\066\002\000\002\014\011\000\002\014\003\000" +
    "\002\017\004\000\002\017\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\003\000\002\022\003\000\002\067" +
    "\002\000\002\034\022\000\002\070\002\000\002\071\002" +
    "\000\002\035\025\000\002\036\003\000\002\036\003\000" +
    "\002\020\004\000\002\020\003\000\002\072\002\000\002" +
    "\023\005\000\002\023\003\000\002\024\015\000\002\026" +
    "\005\000\002\026\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\005\000\002" +
    "\027\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\003\000\002\031\004\000\002\031\003\000\002\032\005" +
    "\000\002\032\005\000\002\033\006\000\002\041\003\000" +
    "\002\041\003\000\002\042\006\000\002\060\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\047\004\000\002\047\003\000\002" +
    "\050\004\000\002\050\003\000\002\037\003\000\002\040" +
    "\006\000\002\061\004\000\002\051\013\000\002\052\013" +
    "\000\002\054\005\000\002\054\003\000\002\053\005\000" +
    "\002\053\003\000\002\055\015\000\002\056\015\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\044" +
    "\007\000\002\057\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\004\011\000\001\002\000\004\002\363\001" +
    "\002\000\004\011\ufffe\001\002\000\004\011\011\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffd\001\002\000" +
    "\004\024\012\001\002\000\004\052\013\001\002\000\014" +
    "\027\ufffc\041\ufffc\042\ufffc\045\015\050\ufffc\001\002\000" +
    "\012\027\ufffc\041\ufffc\042\031\050\ufffc\001\002\000\014" +
    "\024\020\027\ufffc\041\ufffc\042\ufffc\050\ufffc\001\002\000" +
    "\012\027\ufff5\041\ufff5\042\ufff5\050\ufff5\001\002\000\012" +
    "\027\ufff6\041\ufff6\042\ufff6\050\ufff6\001\002\000\004\055" +
    "\022\001\002\000\012\027\ufffa\041\ufffa\042\ufffa\050\ufffa" +
    "\001\002\000\010\031\026\035\024\047\023\001\002\000" +
    "\004\053\ufff7\001\002\000\004\053\ufff8\001\002\000\004" +
    "\053\027\001\002\000\004\053\ufff9\001\002\000\014\024" +
    "\020\027\ufffc\041\ufffc\042\ufffc\050\ufffc\001\002\000\012" +
    "\027\ufffb\041\ufffb\042\ufffb\050\ufffb\001\002\000\012\024" +
    "\346\027\ufffc\041\ufffc\050\ufffc\001\002\000\010\027\035" +
    "\041\ufffc\050\ufffc\001\002\000\010\027\uffec\041\uffec\050" +
    "\uffec\001\002\000\006\041\065\050\ufffc\001\002\000\014" +
    "\024\uffe2\032\uffe2\041\ufffc\050\ufffc\052\uffe2\001\002\000" +
    "\006\041\uffdd\050\uffdd\001\002\000\010\024\045\032\044" +
    "\052\ufffc\001\002\000\006\041\uffde\050\uffde\001\002\000" +
    "\010\034\uffdf\041\uffdf\050\uffdf\001\002\000\004\052\053" +
    "\001\002\000\010\034\uffe4\043\uffe6\052\uffe4\001\002\000" +
    "\004\024\047\001\002\000\010\034\uffe8\043\uffe8\052\uffe8" +
    "\001\002\000\006\034\uffe3\052\uffe3\001\002\000\010\034" +
    "\uffe7\043\uffe7\052\uffe7\001\002\000\004\043\051\001\002" +
    "\000\012\024\045\032\044\034\ufffc\052\ufffc\001\002\000" +
    "\006\034\uffe5\052\uffe5\001\002\000\010\012\057\016\056" +
    "\024\054\001\002\000\020\024\uffe9\032\uffe9\034\uffe9\041" +
    "\uffe9\050\uffe9\052\uffe9\053\uffe9\001\002\000\020\024\ufffc" +
    "\032\ufffc\034\ufffc\041\ufffc\050\ufffc\052\ufffc\053\060\001" +
    "\002\000\020\024\uffeb\032\uffeb\034\uffeb\041\uffeb\050\uffeb" +
    "\052\uffeb\053\uffeb\001\002\000\020\024\uffea\032\uffea\034" +
    "\uffea\041\uffea\050\uffea\052\uffea\053\uffea\001\002\000\016" +
    "\024\uffdc\032\uffdc\034\uffdc\041\uffdc\050\uffdc\052\uffdc\001" +
    "\002\000\016\024\uffe1\032\uffe1\034\uffe1\041\uffe1\050\uffe1" +
    "\052\uffe1\001\002\000\016\024\uffdb\032\uffdb\034\uffdb\041" +
    "\uffdb\050\uffdb\052\uffdb\001\002\000\016\024\uffe2\032\uffe2" +
    "\034\ufffc\041\ufffc\050\ufffc\052\uffe2\001\002\000\010\034" +
    "\uffe0\041\uffe0\050\uffe0\001\002\000\010\014\uffcf\022\uffcf" +
    "\050\uffcf\001\002\000\004\050\070\001\002\000\004\050" +
    "\uffcd\001\002\000\014\013\ufffc\015\071\017\076\024\075" +
    "\046\077\001\002\000\004\024\211\001\002\000\016\013" +
    "\uffb4\015\uffb4\017\uffb4\024\uffb4\026\uffb4\046\uffb4\001\002" +
    "\000\004\013\207\001\002\000\016\013\ufffc\015\071\017" +
    "\076\024\075\026\ufffc\046\077\001\002\000\010\021\151" +
    "\033\150\055\uffb8\001\002\000\020\007\126\021\117\024" +
    "\116\031\113\033\121\035\114\047\112\001\002\000\004" +
    "\033\163\001\002\000\004\055\111\001\002\000\016\013" +
    "\uffb1\015\uffb1\017\uffb1\024\uffb1\026\uffb1\046\uffb1\001\002" +
    "\000\016\013\uffb2\015\uffb2\017\uffb2\024\uffb2\026\uffb2\046" +
    "\uffb2\001\002\000\016\013\uffb3\015\uffb3\017\uffb3\024\uffb3" +
    "\026\uffb3\046\uffb3\001\002\000\004\053\110\001\002\000" +
    "\006\013\uffa8\026\uffa8\001\002\000\004\055\uffb7\001\002" +
    "\000\016\013\uffb0\015\uffb0\017\uffb0\024\uffb0\026\uffb0\046" +
    "\uffb0\001\002\000\020\010\uffa3\013\uffa3\015\uffa3\017\uffa3" +
    "\024\uffa3\026\uffa3\046\uffa3\001\002\000\020\007\126\021" +
    "\117\024\116\031\113\033\121\035\114\047\112\001\002" +
    "\000\030\004\uffc4\006\uffc4\023\uffc4\025\uffc4\034\uffc4\037" +
    "\uffc4\040\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\001\002" +
    "\000\030\004\uffc6\006\uffc6\023\uffc6\025\uffc6\034\uffc6\037" +
    "\uffc6\040\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\001\002" +
    "\000\030\004\uffc7\006\uffc7\023\uffc7\025\uffc7\034\uffc7\037" +
    "\uffc7\040\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\001\002" +
    "\000\004\053\162\001\002\000\034\004\uffc9\006\uffc9\021" +
    "\151\023\uffc9\025\uffc9\033\150\034\uffc9\037\uffc9\040\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\001\002\000\020\007" +
    "\126\021\117\024\116\031\113\033\121\035\114\047\112" +
    "\001\002\000\030\004\uffbc\006\uffbc\023\uffbc\025\uffbc\034" +
    "\uffbc\037\uffbc\040\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\001\002\000\020\007\126\021\117\024\116\031\113\033" +
    "\121\035\114\047\112\001\002\000\016\025\135\037\136" +
    "\040\133\051\132\053\uffb5\054\134\001\002\000\030\004" +
    "\uffbe\006\uffbe\023\uffbe\025\uffbe\034\uffbe\037\uffbe\040\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\054\uffbe\001\002\000\030\004" +
    "\uffc1\006\uffc1\023\uffc1\025\uffc1\034\uffc1\037\uffc1\040\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\001\002\000\030\004" +
    "\uffc3\006\uffc3\023\uffc3\025\uffc3\034\uffc3\037\uffc3\040\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\001\002\000\020\007" +
    "\126\021\117\024\116\031\113\033\121\035\114\047\112" +
    "\001\002\000\030\004\uffc8\006\uffc8\023\uffc8\025\uffc8\034" +
    "\uffc8\037\uffc8\040\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\001\002\000\030\004\uffc5\006\uffc5\023\uffc5\025\uffc5\034" +
    "\uffc5\037\uffc5\040\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\001\002\000\030\004\uffbd\006\uffbd\023\uffbd\025\uffbd\034" +
    "\uffbd\037\uffbd\040\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\001\002\000\020\007\126\021\117\024\116\031\113\033" +
    "\121\035\114\047\112\001\002\000\020\007\126\021\117" +
    "\024\116\031\113\033\121\035\114\047\112\001\002\000" +
    "\020\007\126\021\117\024\116\031\113\033\121\035\114" +
    "\047\112\001\002\000\020\007\126\021\117\024\116\031" +
    "\113\033\121\035\114\047\112\001\002\000\020\007\126" +
    "\021\117\024\116\031\113\033\121\035\114\047\112\001" +
    "\002\000\030\004\uffbf\006\uffbf\023\uffbf\025\uffbf\034\uffbf" +
    "\037\uffbf\040\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\001" +
    "\002\000\030\004\uffca\006\uffca\023\uffca\025\uffca\034\uffca" +
    "\037\uffca\040\uffca\051\uffca\052\uffca\053\uffca\054\uffca\001" +
    "\002\000\030\004\uffcb\006\uffcb\023\uffcb\025\uffcb\034\uffcb" +
    "\037\uffcb\040\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\001" +
    "\002\000\030\004\uffc2\006\uffc2\023\uffc2\025\uffc2\034\uffc2" +
    "\037\uffc2\040\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\001" +
    "\002\000\030\004\uffc0\006\uffc0\023\uffc0\025\uffc0\034\uffc0" +
    "\037\uffc0\040\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\001" +
    "\002\000\016\025\135\034\145\037\136\040\133\051\132" +
    "\054\134\001\002\000\030\004\uffbb\006\uffbb\023\uffbb\025" +
    "\uffbb\034\uffbb\037\uffbb\040\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\001\002\000\016\023\147\025\135\037\136\040" +
    "\133\051\132\054\134\001\002\000\030\004\uffba\006\uffba" +
    "\023\uffba\025\uffba\034\uffba\037\uffba\040\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\001\002\000\010\024\045\032\044" +
    "\034\ufffc\001\002\000\006\024\155\047\152\001\002\000" +
    "\006\004\ufff0\023\ufff0\001\002\000\006\004\uffee\023\uffee" +
    "\001\002\000\004\023\156\001\002\000\010\004\uffef\021" +
    "\151\023\uffef\001\002\000\032\004\uffb9\006\uffb9\023\uffb9" +
    "\025\uffb9\034\uffb9\037\uffb9\040\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\001\002\000\004\034\161\001\002" +
    "\000\004\034\uffa5\001\002\000\030\004\uffa4\006\uffa4\023" +
    "\uffa4\025\uffa4\034\uffa4\037\uffa4\040\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\001\002\000\020\010\uffb6\013\uffb6\015" +
    "\uffb6\017\uffb6\024\uffb6\026\uffb6\046\uffb6\001\002\000\024" +
    "\007\126\021\117\024\116\030\164\031\113\033\121\034" +
    "\ufffc\035\114\047\112\001\002\000\004\034\uff9a\001\002" +
    "\000\016\025\135\034\uff99\037\136\040\133\051\132\054" +
    "\134\001\002\000\004\034\170\001\002\000\004\034\uff98" +
    "\001\002\000\004\053\171\001\002\000\020\010\uff97\013" +
    "\uff97\015\uff97\017\uff97\024\uff97\026\uff97\046\uff97\001\002" +
    "\000\016\006\173\025\135\037\136\040\133\051\132\054" +
    "\134\001\002\000\004\052\174\001\002\000\016\013\ufffc" +
    "\015\071\017\076\024\075\026\ufffc\046\077\001\002\000" +
    "\006\013\ufffc\026\177\001\002\000\004\013\203\001\002" +
    "\000\004\052\201\001\002\000\004\013\uff9d\001\002\000" +
    "\014\013\ufffc\015\071\017\076\024\075\046\077\001\002" +
    "\000\004\013\uff9e\001\002\000\004\017\204\001\002\000" +
    "\004\053\205\001\002\000\016\013\uffa2\015\uffa2\017\uffa2" +
    "\024\uffa2\026\uffa2\046\uffa2\001\002\000\006\013\uffa9\026" +
    "\uffa9\001\002\000\004\044\210\001\002\000\004\002\uffcc" +
    "\001\002\000\004\036\212\001\002\000\020\007\126\021" +
    "\117\024\116\031\113\033\121\035\114\047\112\001\002" +
    "\000\016\004\214\025\135\037\136\040\133\051\132\054" +
    "\134\001\002\000\020\007\126\021\117\024\116\031\113" +
    "\033\121\035\114\047\112\001\002\000\016\025\135\037" +
    "\136\040\133\051\132\052\216\054\134\001\002\000\014" +
    "\013\ufffc\015\071\017\076\024\075\046\077\001\002\000" +
    "\004\013\220\001\002\000\004\015\221\001\002\000\004" +
    "\053\222\001\002\000\016\013\uff9c\015\uff9c\017\uff9c\024" +
    "\uff9c\026\uff9c\046\uff9c\001\002\000\010\014\225\022\224" +
    "\050\ufffc\001\002\000\004\024\253\001\002\000\004\024" +
    "\234\001\002\000\004\050\uffce\001\002\000\010\014\uffd3" +
    "\022\uffd3\050\uffd3\001\002\000\010\014\uffd2\022\uffd2\050" +
    "\uffd2\001\002\000\010\014\225\022\224\050\ufffc\001\002" +
    "\000\004\050\uffd0\001\002\000\004\050\uffd1\001\002\000" +
    "\004\033\uffd8\001\002\000\004\033\236\001\002\000\012" +
    "\024\uffe2\032\uffe2\034\ufffc\052\uffe2\001\002\000\004\034" +
    "\240\001\002\000\004\052\241\001\002\000\014\027\ufffc" +
    "\041\ufffc\042\ufffc\045\015\050\ufffc\001\002\000\012\027" +
    "\ufffc\041\ufffc\042\031\050\ufffc\001\002\000\010\027\035" +
    "\041\ufffc\050\ufffc\001\002\000\006\041\065\050\ufffc\001" +
    "\002\000\004\050\246\001\002\000\012\015\071\017\076" +
    "\024\075\046\077\001\002\000\014\013\ufffc\015\071\017" +
    "\076\024\075\046\077\001\002\000\004\013\251\001\002" +
    "\000\004\053\252\001\002\000\010\014\uffd7\022\uffd7\050" +
    "\uffd7\001\002\000\004\033\uffd6\001\002\000\004\033\255" +
    "\001\002\000\012\024\uffe2\032\uffe2\034\ufffc\052\uffe2\001" +
    "\002\000\004\034\257\001\002\000\004\052\260\001\002" +
    "\000\010\012\265\016\263\024\262\001\002\000\004\052" +
    "\uffd5\001\002\000\004\052\uffda\001\002\000\006\052\ufff2" +
    "\053\ufff2\001\002\000\004\052\uffd9\001\002\000\006\052" +
    "\ufff1\053\ufff1\001\002\000\004\052\267\001\002\000\014" +
    "\027\ufffc\041\ufffc\042\ufffc\045\015\050\ufffc\001\002\000" +
    "\012\027\ufffc\041\ufffc\042\031\050\ufffc\001\002\000\010" +
    "\027\035\041\ufffc\050\ufffc\001\002\000\006\041\065\050" +
    "\ufffc\001\002\000\004\050\274\001\002\000\014\010\305" +
    "\015\275\017\300\024\075\046\077\001\002\000\004\024" +
    "\333\001\002\000\020\010\uffad\013\uffad\015\uffad\017\uffad" +
    "\024\uffad\026\uffad\046\uffad\001\002\000\020\010\uffaf\013" +
    "\uffaf\015\uffaf\017\uffaf\024\uffaf\026\uffaf\046\uffaf\001\002" +
    "\000\020\007\126\021\117\024\116\031\113\033\121\035" +
    "\114\047\112\001\002\000\020\010\uffaa\013\uffaa\015\uffaa" +
    "\017\uffaa\024\uffaa\026\uffaa\046\uffaa\001\002\000\020\010" +
    "\uffae\013\uffae\015\uffae\017\uffae\024\uffae\026\uffae\046\uffae" +
    "\001\002\000\016\010\305\013\ufffc\015\275\017\300\024" +
    "\075\046\077\001\002\000\020\010\uffac\013\uffac\015\uffac" +
    "\017\uffac\024\uffac\026\uffac\046\uffac\001\002\000\020\007" +
    "\126\021\117\024\116\031\113\033\121\035\114\047\112" +
    "\001\002\000\020\010\uffab\013\uffab\015\uffab\017\uffab\024" +
    "\uffab\026\uffab\046\uffab\001\002\000\016\025\135\037\136" +
    "\040\133\051\132\053\310\054\134\001\002\000\020\010" +
    "\uff96\013\uff96\015\uff96\017\uff96\024\uff96\026\uff96\046\uff96" +
    "\001\002\000\004\013\315\001\002\000\020\010\305\013" +
    "\ufffc\015\275\017\300\024\075\026\ufffc\046\077\001\002" +
    "\000\006\013\uffa6\026\uffa6\001\002\000\006\013\uffa7\026" +
    "\uffa7\001\002\000\004\053\316\001\002\000\010\014\uffd4" +
    "\022\uffd4\050\uffd4\001\002\000\016\006\320\025\135\037" +
    "\136\040\133\051\132\054\134\001\002\000\004\052\321" +
    "\001\002\000\020\010\305\013\ufffc\015\275\017\300\024" +
    "\075\026\ufffc\046\077\001\002\000\006\013\ufffc\026\323" +
    "\001\002\000\004\052\331\001\002\000\004\013\326\001" +
    "\002\000\004\013\uff9f\001\002\000\004\017\327\001\002" +
    "\000\004\053\330\001\002\000\020\010\uffa1\013\uffa1\015" +
    "\uffa1\017\uffa1\024\uffa1\026\uffa1\046\uffa1\001\002\000\016" +
    "\010\305\013\ufffc\015\275\017\300\024\075\046\077\001" +
    "\002\000\004\013\uffa0\001\002\000\004\036\334\001\002" +
    "\000\020\007\126\021\117\024\116\031\113\033\121\035" +
    "\114\047\112\001\002\000\016\004\336\025\135\037\136" +
    "\040\133\051\132\054\134\001\002\000\020\007\126\021" +
    "\117\024\116\031\113\033\121\035\114\047\112\001\002" +
    "\000\016\025\135\037\136\040\133\051\132\052\340\054" +
    "\134\001\002\000\016\010\305\013\ufffc\015\275\017\300" +
    "\024\075\046\077\001\002\000\004\013\342\001\002\000" +
    "\004\015\343\001\002\000\004\053\344\001\002\000\020" +
    "\010\uff9b\013\uff9b\015\uff9b\017\uff9b\024\uff9b\026\uff9b\046" +
    "\uff9b\001\002\000\010\027\uffed\041\uffed\050\uffed\001\002" +
    "\000\004\055\350\001\002\000\010\027\ufff3\041\ufff3\050" +
    "\ufff3\001\002\000\004\020\351\001\002\000\004\021\352" +
    "\001\002\000\006\024\155\047\152\001\002\000\004\004" +
    "\354\001\002\000\006\024\155\047\152\001\002\000\004" +
    "\023\356\001\002\000\004\005\357\001\002\000\006\012" +
    "\265\016\263\001\002\000\004\053\361\001\002\000\012" +
    "\024\346\027\ufffc\041\ufffc\050\ufffc\001\002\000\010\027" +
    "\ufff4\041\ufff4\050\ufff4\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\006\002\003\062\004\001\001\000\002\001" +
    "\001\000\006\003\006\063\005\001\001\000\004\024\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\015\007\013\001\001" +
    "\000\006\004\032\013\031\001\001\000\006\004\020\005" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\020\005\027\001\001\000\002\001" +
    "\001\000\006\004\346\010\344\001\001\000\006\004\035" +
    "\017\033\001\001\000\002\001\001\000\006\004\066\023" +
    "\065\001\001\000\010\004\040\014\037\065\036\001\001" +
    "\000\002\001\001\000\010\004\045\016\041\025\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\045\016\051\025\042\001\001\000\002\001" +
    "\001\000\004\015\054\001\001\000\002\001\001\000\006" +
    "\004\061\021\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\062\001\001\000\002" +
    "\001\001\000\010\004\040\014\063\065\036\001\001\000" +
    "\002\001\001\000\004\072\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\104\033\105\040\103\041" +
    "\077\042\071\044\100\045\073\047\072\051\102\055\101" +
    "\061\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\104\033\105\040\103\041\077" +
    "\042\071\044\100\045\073\047\205\051\102\055\101\061" +
    "\106\001\001\000\002\001\001\000\020\026\171\027\124" +
    "\030\123\031\122\032\117\033\127\040\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\026\121\027\124\030\123\031\122\032\117\033" +
    "\127\040\126\060\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\026\145\027\124\030\123\031\122\032\117" +
    "\033\127\040\126\001\001\000\002\001\001\000\020\026" +
    "\143\027\124\030\123\031\122\032\117\033\127\040\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\026\130\027\124\030\123" +
    "\031\122\032\117\033\127\040\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\026\142" +
    "\027\124\030\123\031\122\032\117\033\127\040\126\001" +
    "\001\000\020\026\141\027\124\030\123\031\122\032\117" +
    "\033\127\040\126\001\001\000\020\026\140\027\124\030" +
    "\123\031\122\032\117\033\127\040\126\001\001\000\020" +
    "\026\137\027\124\030\123\031\122\032\117\033\127\040" +
    "\126\001\001\000\020\026\136\027\124\030\123\031\122" +
    "\032\117\033\127\040\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\045\016\157\025\042" +
    "\037\156\001\001\000\006\012\153\033\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\166" +
    "\026\164\027\124\030\123\031\122\032\117\033\127\040" +
    "\126\043\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\104\033\105\040\103\041\077\042\071\044\100\045" +
    "\073\047\174\051\102\055\101\061\106\001\001\000\006" +
    "\004\177\053\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\104\033\105\040\103" +
    "\041\077\042\071\044\100\045\073\047\201\051\102\055" +
    "\101\061\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\026\212\027\124\030\123\031\122\032\117\033\127\040" +
    "\126\001\001\000\002\001\001\000\020\026\214\027\124" +
    "\030\123\031\122\032\117\033\127\040\126\001\001\000" +
    "\002\001\001\000\030\004\104\033\105\040\103\041\077" +
    "\042\071\044\100\045\073\047\216\051\102\055\101\061" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\231\020\225\034" +
    "\226\035\227\036\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\231\020\232\034\226\035\227\036\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\234\001\001\000\002\001\001\000\010\004\040\014\236" +
    "\065\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\015\007\241\001\001\000\006\004\032\013\242" +
    "\001\001\000\006\004\035\017\243\001\001\000\006\004" +
    "\066\023\244\001\001\000\002\001\001\000\024\033\105" +
    "\040\103\041\077\042\071\044\100\045\246\051\102\055" +
    "\101\061\106\001\001\000\030\004\104\033\105\040\103" +
    "\041\077\042\071\044\100\045\073\047\247\051\102\055" +
    "\101\061\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\253\001\001\000\002\001" +
    "\001\000\010\004\040\014\255\065\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\263\022\260\001" +
    "\001\000\004\071\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\015\007\267\001\001\000\006\004\032" +
    "\013\270\001\001\000\006\004\035\017\271\001\001\000" +
    "\006\004\066\023\272\001\001\000\002\001\001\000\026" +
    "\033\105\040\103\041\077\042\276\044\303\046\302\052" +
    "\301\056\275\057\300\061\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\026\316\027" +
    "\124\030\123\031\122\032\117\033\127\040\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\312\033" +
    "\105\040\103\041\077\042\276\044\303\046\311\050\310" +
    "\052\301\056\275\057\300\061\305\001\001\000\002\001" +
    "\001\000\020\026\306\027\124\030\123\031\122\032\117" +
    "\033\127\040\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\312" +
    "\033\105\040\103\041\077\042\276\044\303\046\311\050" +
    "\313\052\301\056\275\057\300\061\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\312" +
    "\033\105\040\103\041\077\042\276\044\303\046\311\050" +
    "\321\052\301\056\275\057\300\061\305\001\001\000\006" +
    "\004\324\054\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\004\312\033\105\040\103\041" +
    "\077\042\276\044\303\046\311\050\331\052\301\056\275" +
    "\057\300\061\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\026\334\027\124\030\123\031\122\032\117" +
    "\033\127\040\126\001\001\000\002\001\001\000\020\026" +
    "\336\027\124\030\123\031\122\032\117\033\127\040\126" +
    "\001\001\000\002\001\001\000\032\004\312\033\105\040" +
    "\103\041\077\042\276\044\303\046\311\050\340\052\301" +
    "\056\275\057\300\061\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\352\033\152\001\001" +
    "\000\002\001\001\000\006\012\354\033\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\357\001\001" +
    "\000\002\001\001\000\006\004\346\010\361\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentenciaDevolver ::= FRETURN expresion DSENTENCIAS 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//¿¿HAY QUE ASEGURARSE QUE SE VAYA A EJECUTAR UN DEVOLVER EN CADA IF,ETC??
		String tipo = ((Expresion) exp).getType();
		System.out.println("LLegada a sentencia devolver de tipo: " + ((Expresion) exp).getType());
		SymbolFunction.addTipoDevolver(tipo);
		SymbolFunction.setDevolverDeclarado(true);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevolver",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentenciaEscribir ::= ESCRIBIR PIZQUIERDO parametroEscribir PDERECHO DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametroEscribir ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametroEscribir ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametroEscribir ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaforFuncion ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentenciasFuncion FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaforFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciafor ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentencias FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciafor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // rellenoif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // rellenoif ::= ALTERNATIVASI DELIMFUNC listaSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // rellenoifFuncion ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoifFuncion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // rellenoifFuncion ::= ALTERNATIVASI DELIMFUNC listaSentenciasFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoifFuncion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciaifFuncion ::= COMIENZOSI expresion STARTIF DELIMFUNC listaSentenciasFuncion rellenoifFuncion FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaifFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentenciaif ::= COMIENZOSI expresion STARTIF DELIMFUNC listaSentencias rellenoif FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaif",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentenciallamadafuncion ::= llamadafuncion DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciallamadafuncion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // llamadafuncion ::= IDEN PIZQUIERDO parametrofuncionoproc PDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadafuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametrofuncionoproc ::= listavariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrofuncionoproc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // listaSentenciasFuncion ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // listaSentenciasFuncion ::= sentenciaFuncion listaSentenciasFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listaSentencias ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listaSentencias ::= sentencia listaSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciaFuncion ::= sentenciaDevolver 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentenciaFuncion ::= sentenciallamadafuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentenciaFuncion ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaFuncion ::= sentenciaforFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaFuncion ::= sentenciaifFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaFuncion ::= sentenciadeasignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia ::= sentenciallamadafuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= sentenciafor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia ::= sentenciaif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= sentenciadeasignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametroasignacion ::= expresion 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Obteniendo expresión de sentencia de asignación");
		RESULT = ex;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroasignacion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciadeasignacion ::= parteizquierdaasignacion ASIGNACION parametroasignacion DSENTENCIAS 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		System.out.println("Empezando a analizar asignación");
		System.out.println("El tipo de la expresión derecha es: " + ((Expresion) pd).getType());
		//Compruebo si concuerdan los tipos de la parte izquierda y derecha y qué tipòs son, según sea seteo la SentenciaAsignacion.
		if(( ((SymbolIF) pi).getType().getName().equals("entero") && ((Expresion) pd).getType().equals("entero"))){
			SentenciaAsignacion asign = new SentenciaAsignacion((SymbolIF) pi, (Expresion) pd, "entero");
			System.out.println("Sentencia de asignación entera analizada");
			RESULT = asign;
		} else if(((SymbolIF) pi).getType().getName().equals("boolean") && ((Expresion) pd).getType().equals("boolean")){
			SentenciaAsignacion asign = new SentenciaAsignacion((SymbolIF) pi,(Expresion) pd,"boolean");
			System.out.println("Sentencia de asignación booleana analizada");
			RESULT = asign;
		//En el caso de miembros de vectores la cosa se complica un poco, compruebo que primero sea un array y luego que su tiempo simple sea igual a la expresión de la derecha.
		} else if((((SymbolIF) pi).getType() instanceof TypeArray) && ((TypeArray) ((SymbolIF) pi).getType()).getTypeSimple().getName().equals(((Expresion) pd).getType())) {
			SentenciaAsignacion asign = new SentenciaAsignacion((SymbolIF) pi, (Expresion) pd,"miembro_vector");
			System.out.println("Sentencia de asignación a miembro de vector añadida");
		} else
			//System.out.println(((SymbolIF) pi).getType().getName() + "     tiposimple" + ((TypeArray) ((SymbolIF) pi).getType()).getTypeSimple().getName);
			throw new RuntimeException("No se puede asignar a una variable de tipo " + ((SymbolIF) pi).getType().getName() + " una expresión de tipo " + ((Expresion) pd).getType());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciadeasignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parteizquierdaasignacion ::= miembrovector 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Obteniendo parte vectorial izquierda de asignación");
		//Obtengo el simbolo del array del que forma parte el miembro.
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String lexema;
		//Obtengo el nombre del vector
		if(mv instanceof PrimitivaAritmetica){
			lexema = ((PrimitivaAritmetica) mv).getNombreVector();
		} else if (mv instanceof PrimitivaLogica){
			lexema = ((PrimitivaLogica) mv).getNombreVector();
		} else {
			throw new RuntimeException("En este punto sólo se espera la llegada de una primitiva aritmética o lógica");
		}
		SymbolIF vector;
		if(scopeManager.containsSymbol(lexema)){
			vector = scopeManager.searchSymbol(lexema);
		}
		else
			throw new RuntimeException("No existe ningún símbolo con nombre " + lexema);
		RESULT = vector;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteizquierdaasignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parteizquierdaasignacion ::= IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Obteniendo parte izquierda de asignación");
		//Hay que obtener el símbolo relacionado a IDEN
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String lexema = ((TokenIF) id).getLexema();
		SymbolIF identificador;
		//Compruebo y obtengo el sombolo del identificador.
		if(scopeManager.containsSymbol(lexema)){
			identificador = scopeManager.searchSymbol(((TokenIF) id).getLexema());
			System.out.println(identificador);
			System.out.println("Variable encontrada en la tabla de símbolos de tipo: " + identificador.getType().getName());
			//Si es una contante lo que hay en la parte izquierda; no está permitido. 
			if(identificador instanceof SymbolConstant){
				throw new RuntimeException("No se puede realizar una asignación de una constante");
			}
		}
		else
			throw new RuntimeException("No existe ningún símbolo con nombre " + lexema);
		//Compruebo si el identificador corresponde a una variable.
		if(identificador.getClass().getSimpleName().equals("SymbolVariable")){
			RESULT = identificador;
		} else
			throw new RuntimeException("No se puede utilizar en una sentencia de asignación un símbolo de tipo: " + identificador.getClass().getName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteizquierdaasignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // miembrovector ::= IDEN CIZQUIERDO valorango CDERECHO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rangoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rangoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rango = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//Hay que obtener el vector relacionado con miembroVector
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String nombre_vector = ((TokenIF) id).getLexema();
		SymbolIF vector; 
		TypeArray tipo_array;
		if(scopeManager.containsSymbol(nombre_vector) && (scopeManager.searchSymbol(nombre_vector).getType() instanceof TypeArray)){
			vector = scopeManager.searchSymbol(nombre_vector);
			//Compruebo que no se haya pasado de dimensión el rango proporcionado (>=).
			if((int) rango >= ((TypeArray) vector.getType()).getRango()){
				throw new RuntimeException("Intento de acceso al array " + nombre_vector + " fuera de rango, su tamaño es " + ((TypeArray) vector.getType())
.getRango() + " y se trata de acceder al miembro " + (int) rango);
			}
			tipo_array = (TypeArray) scopeManager.searchSymbol(nombre_vector).getType();
		} else
			throw new RuntimeException("No se ha encontrado un vector con el nombre: " + nombre_vector);		
		//Según el tipo del vector creo un tipo de expresión u otra. TODO IMPLEMENTACION getName() en TypeArray.
		Expresion primitiva;
		
		switch(tipo_array.getTypeSimple().getName()){
			case "entero":
				//Creo una PrimitivaAritmetica.
				primitiva = new PrimitivaAritmetica(null,null,null);
				//int valor_miembro = ((int) vector.getArray()[(int) rango]);
				//primitiva.setValor(valor_miembro);
				((PrimitivaAritmetica) primitiva).setNombreVector(nombre_vector);
				RESULT = primitiva;
				break;
			case "boolean": 
				primitiva = new PrimitivaLogica(null,null,null);
				//boolean valor_miembro = ((boolean) vector.getArray()[(int) rango]);
				//primitiva.setValorLogico(valor_miembro);
				((PrimitivaLogica) primitiva).setNombreVector(nombre_vector);
				RESULT = primitiva;
				break;
			default:
				throw new RuntimeException("Los vectores solo pueden estar conformados de enteros o lógicos, actualmente: " + tipo_array.getTypeSimple());
		}		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("miembrovector",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionlvl5 ::= CIZQUIERDO expresion CDERECHO 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = va;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionlvl5 ::= PIZQUIERDO expresion PDERECHO 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = va;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresionlvl4 ::= expresionlvl5 
            {
              Object RESULT =null;
		int lvl5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvl5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lvl5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = lvl5;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresionlvl4 ::= NOLOGICO expresion 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Compruebo que la expresión sea bien lógica o bien primitiva lógica.
		if((vd instanceof ExpresionLogica) ||	(vd instanceof PrimitivaLogica)){
			//En dicho caso creo la expresión aritmética.
			ExpresionLogica logica = new ExpresionLogica(null, "!", (Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("Una expresión de tipo " + ( (Expresion) vd).getClass().getSimpleName() + " no puede ser parte de una expresión lógica de negación.");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresionlvl3 ::= expresionlvl4 
            {
              Object RESULT =null;
		int lvl4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvl4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lvl4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = lvl4;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresionlvl3 ::= expresion PRODUCTO expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
		//ScopeIF scope = scopeManager.getCurrentScope();
		//SymbolTableIF syTable = scope.getSymbolTable();
		if(((vi instanceof ExpresionAritmetica) ||(vi instanceof PrimitivaAritmetica)) && ((vd instanceof ExpresionAritmetica) ||	(vd instanceof PrimitivaAritmetica))){
			//En dicho caso creo la expresión aritmética.
			ExpresionAritmetica logica = new ExpresionAritmetica((Expresion) vi, "+", (Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("No se pueden mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresionlvl3 ::= expresion YLOGICA expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Compruebo que ambas expresiones son o bien lógicas o bien primitivas lógicas.
		if(((vi instanceof ExpresionLogica) ||(vi instanceof PrimitivaLogica)) && ((vd instanceof ExpresionLogica) ||	(vd instanceof PrimitivaLogica))){
			//En dicho caso creo la expresión aritmética.
			ExpresionLogica logica = new ExpresionLogica((Expresion) vi, "&&", (Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("No se pueden mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresionlvl2 ::= expresionlvl3 
            {
              Object RESULT =null;
		int lvl3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvl3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lvl3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = lvl3;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresionlvl2 ::= expresion SUMA expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
		//ScopeIF scope = scopeManager.getCurrentScope();
		//SymbolTableIF syTable = scope.getSymbolTable();
		
		//Compruebo que ambas expresiones son o bien aritméticas o bien primitivas aritméticas.
		if(((vi instanceof ExpresionAritmetica) ||(vi instanceof PrimitivaAritmetica)) && ((vd instanceof ExpresionAritmetica) ||	(vd instanceof PrimitivaAritmetica))){
			//En dicho caso creo la expresión aritmética.
			RESULT= new ExpresionAritmetica((Expresion) vi, "+", (Expresion) vd);
		}
		else
			throw new RuntimeException("No se pueden mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresionlvl2 
            {
              Object RESULT =null;
		int lvl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lvl2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = lvl2;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= NUM 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Creo la primitiva, le seteo su valor y la devuelvo.
		PrimitivaAritmetica numero = new PrimitivaAritmetica(null, null, null);
		numero.setValor(Integer.parseInt(((TokenIF) num).getLexema()));
		RESULT = numero;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= miembrovector 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = v;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= FALSO 
            {
              Object RESULT =null;
		
		//Creo una primitiva lógica y le seteo su valor false.
		PrimitivaLogica primitiva_logica = new PrimitivaLogica(null,null,null);
		primitiva_logica.setValorLogico(false);
		RESULT = primitiva_logica;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= CIERTO 
            {
              Object RESULT =null;
		
		//Creo una primitiva lógica y le seteo su valor true.
		PrimitivaLogica primitiva_logica = new PrimitivaLogica(null,null,null);
		primitiva_logica.setValorLogico(true);
		RESULT = primitiva_logica;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= llamadafuncion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Hay que obtener la función relacionada a llamadafuncion
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String lexema = ((TokenIF) f).getLexema();
		//Compruebo que no es un procedimiento pues no puede ser parte de una expresión.
		if(f instanceof SymbolProcedure){
			throw new RuntimeException("No está permitido el uso de procedimientos como parte de una expresión.");
		}
		SymbolFunction funcion;
		//Compruebo y obtengo la función de la tabla de símbolos.
		if(scopeManager.containsSymbol(lexema)){
			funcion = (SymbolFunction) scopeManager.searchSymbol(lexema);
		}
		else
			throw new RuntimeException("No existe ninguna función con nombre " + lexema);
		Expresion primitiva;
		//Según el tipo de la función creo un tipo de expresión u otra.
		switch(funcion.getReturn().getName()){
			case "entero":
				//Creo una PrimitivaAritmetica.
				primitiva = new PrimitivaAritmetica(null,null,null);
				//primitiva.setValor(Integer.parseInt(funcion.getValue()));
				RESULT = primitiva;
				break;
			case "boolean": 
				//Creo una PrimitivaLogica
				primitiva = new PrimitivaLogica(null,null,null);
				//primitiva.setValorLogico(Boolean.valueOf(funcion.getValue()));
				RESULT = primitiva;
				break;
			default:
				throw new RuntimeException("Las funciones con este tipo de retorno " + funcion.getType().getName() + " no pueden formar parte de una expresión.");		
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Extrayendo identificador de parte de una expresión");
		//Hay que obtener el símbolo relacionado a IDEN
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String lexema = ((TokenIF) id).getLexema();
		SymbolIF identificador;
		//Compruebo y obtengo el sombolo del identificador.
		if(scopeManager.containsSymbol(lexema)){
			identificador = scopeManager.searchSymbol(((TokenIF) id).getLexema());
		}
		else
			throw new RuntimeException("No existe ningún símbolo con nombre " + lexema);
		//Ahora hay que determinar qué tipo de símbolo es, según el tipo habrá que ver si es compatible con ser parte de una expresión.
		Expresion primitiva;
		switch(identificador.getClass().getSimpleName()){
			case "SymbolConstant":
				if(identificador.getType().getName().equals("entero")){
					//Creo la primitiva en el caso de que el tipo de la constante sea entera.
					primitiva = new PrimitivaAritmetica(null,null,null);
					//primitiva.setValor(Integer.parseInt(identificador.getValue()));
					RESULT = primitiva;
				}
				else if(identificador.getType().getName().equals("boolean")){
					//HAY QUE IMPLEMENTAR getValue() en simbolos constantes.
					primitiva = new PrimitivaLogica(null,null,null);
					//primitiva.setValorLogico(Boolean.valueOf(identificador.getValue()));
					RESULT = primitiva;
				}
				else
					throw new RuntimeException("No se puede utilizar una constante de tipo " + identificador.getType().getName() + " como parte de una expresión aritmética o lógica, sólo está permitido enteros.");
				break;
			case "SymbolParameter":
				//TODO hasta que tenga aclarado qué es este tipo de símbolo
				break;
			case "SymbolVariable":
				if(identificador.getType().getName().equals("entero")){
					//Creo la primitiva en el caso de que el tipo de la constante sea entera.
					//Creo la primitiva en el caso de que el tipo de la constante sea entera.
					primitiva = new PrimitivaAritmetica(null,null,null); 
					//primitiva.setValor(Integer.parseInt(identificador.getValue()));
					RESULT = primitiva;
				}
				else if(identificador.getType().getName().equals("boolean")){
					//HAY QUE IMPLEMENTAR getValue() en simbolos variables.
					primitiva = new PrimitivaLogica(null,null,null);
					//primitiva.setValorLogico(Boolean.valueOf(identificador.getValue()));
					RESULT = primitiva;
				} 
				else
					throw new RuntimeException("No se puede utilizar una constante de tipo " + identificador.getType().getName() + " como parte de una expresión aritmética o lógica, sólo está permitido enteros o primitivas lógicas.");
				break;
			default:
				throw new RuntimeException("No se puede utilizar un símbolo de tipo " + identificador.getClass().getSimpleName() + " como parte de una expresión.");
		}			
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion IGUALDAD expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Analizando parte de expresión");
		//Compruebo que ambas expresiones son o bien lógicas o bien primitivas lógicas.
		if(((vi instanceof ExpresionLogica) ||(vi instanceof PrimitivaLogica)) && ((vd instanceof ExpresionLogica) ||	(vd instanceof PrimitivaLogica))){
			//En dicho caso creo la expresión aritmética.
			ExpresionLogica logica = new ExpresionLogica((Expresion) vi, "==",(Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("No se puedem mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Compruebo que ambas expresiones son o bien lógicas o bien primitivas lógicas.
		if(((vi instanceof ExpresionLogica) ||(vi instanceof PrimitivaLogica)) && ((vd instanceof ExpresionLogica) ||	(vd instanceof PrimitivaLogica))){
			//En dicho caso creo la expresión aritmética.
			ExpresionLogica logica = new ExpresionLogica((Expresion) vi, "<",(Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("No se puedem mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // defprincipal ::= COMIENZOPROGRAMA IDEN DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO listaSentencias FINBLOQUESENTENCIAS FINPROGRAMA 
            {
              Object RESULT =null;
		
		scopeManager.closeScope();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defprincipal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // seccionsubprograma ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionsubprograma",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // seccionsubprograma ::= COMIENZOSUBPROGRAMAS NT$8 defsubprograma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionsubprograma",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$8 ::= 
            {
              Object RESULT =null;

		System.out.println("Iniciando análisis de subprogramas");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // defsubprograma ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defsubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // defsubprograma ::= selectorpof defsubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defsubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // selectorpof ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorpof",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // selectorpof ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorpof",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcion ::= DECLAREFUNCION IDEN NT$6 PIZQUIERDO defvariables PDERECHO DELIMFUNC tiporetornofuncion NT$7 DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentenciaFuncion listaSentenciasFuncion FINBLOQUESENTENCIAS DSENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		
		//Obtengo el devolver declarado en la función.
		//Compruebo que se ha producido un devolver correcto.
		if(!SymbolFunction.getDevolverDeclarado()){
			throw new RuntimeException("No se ha explicitado un devolver en la función: " + ((TokenIF) id).getLexema());
		} else if(!SymbolFunction.comprobarTiposDevolver((String) retorno)){
			SymbolFunction.clearTiposDevolver();
			throw new RuntimeException("Al menos un tipo devolver explicitado en la función " + ((TokenIF) id).getLexema() + " no es del tipo declarado: " + (String) retorno);
		} else
			//Reseteo los tipos devolver para futuras funciones.
			SymbolFunction.clearTiposDevolver();

		//Lo seteo a false para comprobar siguientes funciones.
		SymbolFunction.setDevolverDeclarado(false);

		System.out.println("Función analizada correctamente");
		scopeManager.closeScope();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object retorno = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		//Busco la scope del programa que lo engloba (la scope padre) y añado la función a su tabla de símbolos.
		ScopeIF scope = scopeManager.getParentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		SymbolFunction funcion = new SymbolFunction(scope, ((TokenIF) id).getLexema(), (TypeIF) scopeManager.searchType((String) retorno));
		syTable.addSymbol(funcion);	
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		//Abro una nueva scope para añadir la información de la función.
		String nombre_funcion = ((TokenIF) id).getLexema();
		scopeManager.openScope(nombre_funcion);
		System.out.println("Empezando a analizar funcion: " + nombre_funcion);
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procedimiento ::= COMIENZOPROCEDIMIENTO IDEN NT$5 PIZQUIERDO defvariables PDERECHO DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentencia listaSentencias FINBLOQUESENTENCIAS DSENTENCIAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		
		System.out.println("Procedimiento analizado correctamente");
		scopeManager.closeScope();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		String nombre_procedimiento = ((TokenIF) id).getLexema();

		//Guardo el procedimiento en el scope actual.
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		SymbolProcedure procedimiento = new SymbolProcedure(scope, nombre_procedimiento, null);
		syTable.addSymbol(procedimiento);

		//Creo un scope nuevo para añadir la información del procedimiento.
		scopeManager.openScope(nombre_procedimiento);
		System.out.println("Empezando a analizar procedimiento: " + nombre_procedimiento);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tiporetornofuncion ::= tipovector 
            {
              Object RESULT =null;
		int entvsboolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entvsboolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object entvsbool = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Aquí se está decidiendo si se el tipo es entero o booleano aunque no lo parezca.
		//Simplemento lo devuelvo (es String)
		RESULT = entvsbool;	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiporetornofuncion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tiporetornofuncion ::= IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
		String nombre_tipo = ((TokenIF) id).getLexema();
		//Compruebo que el tipo ya haya sido declarado en la scope, sino, lanzo error.
		if(!scopeManager.containsType(nombre_tipo)){
			throw new RuntimeException("No se puede crear una función con un tipo de retorno no declarado, declare el tipo: " + nombre_tipo);
		}
		RESULT = nombre_tipo;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiporetornofuncion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // puntoycomaopcional ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoycomaopcional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // puntoycomaopcional ::= DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoycomaopcional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // seccionvariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionvariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // seccionvariables ::= DECLVARIABLES defvariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionvariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // defvariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defvariables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // defvariables ::= NT$3 listavariables DELIMFUNC tipovariable puntoycomaopcional NT$4 defvariables 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defvariables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

		System.out.println("Analizando una línea de declaración de variables");
		//Obtengo el escope y la tabla de simbolos y de tipòs.
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		TypeTableIF tyTable = scope.getTypeTable();
		//Obtengo los nombres de las variables en declaración en esta línea.
		ArrayList<Parametro> parametros = ListaVariables.getVariables();
		//Según el nombre del tipo guardo el tipo.
		TypeIF tipe;
		boolean vector = false;
		switch((String) tipo){
			case "entero":
				//En el caso de que el tipo no se haya declarado antes, lo añado a la tabla de tipos.
				if(!scope.getScopeManager().containsType("entero")){
					tipe = new TypeSimple(scope, "entero");
					tyTable.addType(tipe);
				} else {
					//En caso contrario lo obtengo de la propia tabla de tipos.
					tipe = scopeManager.searchType("entero");
				}				
				break;
			case "boolean":
				if(!scope.getScopeManager().containsType("boolean")){
					tipe = new TypeSimple(scope, "boolean");
					tyTable.addType(tipe);
				} else {
					tipe = scopeManager.searchType("boolean");
				}
				break;
			default:
				if(!scope.getScopeManager().containsType((String) tipo)){
					throw new RuntimeException("No se puede declarar variables con tipos de usuario no declarados anteriormente, declara el tipo antes de usarlo: " + (String) tipo);
				} else {
					tipe = scopeManager.searchType((String) tipo);
					vector = true;
				}
				break;
		}
		//Creo un símbolo para cada una de ellas según su tipo y nombre y la añado a la tabla de símbolos.
		for(Parametro parametro : parametros){
			String nombre_variable = parametro.getNombre();
			if(syTable.containsSymbol(nombre_variable)){
				throw new RuntimeException("Ya existe una variable en este ámbito con el mismo nombre: " + nombre_variable);
			}
			SymbolVariable variable = new SymbolVariable(scope, nombre_variable, tipe);
			//Si la variable declarada ha tenido un var precediendole entonces es por referencia y le seteo dicha información.
			if(parametro.getValVSRef() || vector){
				variable.setValVSRef(true);			
			}
			System.out.println("Variable declarada con nombre " + nombre_variable + " y tipo " + tipe.getName());
			syTable.addSymbol(nombre_variable, variable);
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$3 ::= 
            {
              Object RESULT =null;

		System.out.println("Iniciando análisis de declaración de variables");
		//Limpio la lista de variables de la línea anterior.
		ListaVariables.clearVariables();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listavariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listavariables ::= selectorvalororeferencia 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ListaVariables.addVariable((Parametro) parametro);
		System.out.println("Última declaración de variable analizada de la línea:" + ((Parametro) parametro).getNombre());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listavariables ::= selectorvalororeferencia NT$2 DIDENTIFICADORES listavariables 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		//He utilizado un métoido estático para poder ir añadiendo elementos.
		ListaVariables.addVariable((Parametro) parametro);
		System.out.println("Declaración de variable analizada:" + ((Parametro) parametro).getNombre());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // selectorvalororeferencia ::= PARAMETROVALOR IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Obteniedno lexema de declaración de variable: " + ((TokenIF) id).getLexema());
		String lexema = ((TokenIF) id).getLexema();
		//Creo el parámetro.
		Parametro parametro = new Parametro(lexema, true);
		RESULT = parametro;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorvalororeferencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // selectorvalororeferencia ::= IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Obteniedno lexema de declaración de variable: " + ((TokenIF) id).getLexema());
		String lexema = ((TokenIF) id).getLexema();
		//Creo el parámetro.
		Parametro parametro = new Parametro(lexema, false);
		RESULT = parametro;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorvalororeferencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipovariable ::= IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = ((TokenIF) id).getLexema();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipovariable ::= ENTERO 
            {
              Object RESULT =null;
		
		RESULT = "entero";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipovariable ::= BOOLEANO 
            {
              Object RESULT =null;
		
		RESULT = "boolean";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // secciontipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secciontipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // secciontipos ::= COMIENZODECLTIPOS deftipos 
            {
              Object RESULT =null;
		System.out.println("Sección de tipos analizada");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("secciontipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valorango ::= miembrovector 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Miembro vector devuelve una primitiva aritmetica o logica, solo si es entera obtengo su valor y lo devuelvo.
		if(mv instanceof PrimitivaAritmetica) {
			//int valor_miembro = ((PrimitivaAritmetica) mv).getValor();
			//if( valor_miembro != null){
			RESULT = mv;
			//} else {
				//throw new RuntimeException("El valor del miembro del vector no está inicialiado todavía, es null.");
			//}
		} else
			throw new RuntimeException("Sólo se pueden instanciar rangos con enteros, actualmente la expresión vectorial es: " + mv.getClass().getSimpleName());
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valorango ::= IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Tengo que obtener el valor del identificador para pasarselo para calcular el rango del tipo.
		//Obtengo la scope y tabla de símbolos.
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String nombre_rango = ((TokenIF) id).getLexema();
		//Compruebo que el identificador exista con anterioridad.
		if(!scopeManager.containsSymbol(nombre_rango)){
			throw new RuntimeException("No se puede establecer el rango debido a que no ha sido declarado con anterioridad el simbolo: " + nombre_rango);
		}
		//Obtengo el símbolo.
		SymbolIF rango = scopeManager.searchSymbol(nombre_rango);
		int valor;
		//Compruevo que el simbolo sea de tipo aritmético.
		if(!rango.getType().getName().equals("entero")){
			throw new RuntimeException("Sólo se pueden establecer rangos con simbolos enteros, actualmente es: " + rango.getType().getName());
		}
		//Compruebo que tenga valor asociado.
		if(rango instanceof SymbolVariable){
			if(((SymbolVariable) rango).getValue() == null){
				throw new RuntimeException("Aunque el simbolo " + nombre_rango + " entero está declarado con anterioridad, aún no se le ha asignado un valor, actualmente es null, no se puede crear un rango de dimensión null");
			}
			//Obtengo el valor del simbolo entero obtenido.
			valor = Integer.parseInt(((SymbolVariable) rango).getValue());
		} else if(rango instanceof SymbolConstant) {
			if(((SymbolConstant) rango).getValue() == null){
				throw new RuntimeException("Aunque el simbolo " + nombre_rango + " entero está declarado con anterioridad, aún no se le ha asignado un valor, actualmente es null, no se puede crear un rango de dimensión null");
			}
			valor = Integer.parseInt(((SymbolConstant) rango).getValue());
		} else {
			throw new RuntimeException("En este punto sólo se espera un símboloo variable o constante, no de otro tipo");
		}
		RESULT = valor;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valorango ::= NUM 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Tengo que obtener el numero del valor para pasarselo para calcular el rango del tipo.
		int valor = Integer.parseInt(((TokenIF) num).getLexema());
		RESULT = valor;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipovector ::= ENTERO 
            {
              Object RESULT =null;
		
		System.out.println("Analizando declaración de vector de enteros");
		RESULT = "entero";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovector",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipovector ::= BOOLEANO 
            {
              Object RESULT =null;
		
		System.out.println("Analizando declaración de vector de booleanos");
		RESULT = "boolean";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovector",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // deftipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // deftipos ::= IDEN ASIGNACION DECLVECTOR CIZQUIERDO valorango RANGO valorango CDERECHO ASIGNACIONVECTOR tipovector DSENTENCIAS deftipos 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int rango_infleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rango_infright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object rango_inf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rango_supleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rango_supright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object rango_sup = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		System.out.println("Empezando a analizar línea de tipos");
		//Obtengo el escope y la tabla de simbolos y de tipòs.
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		TypeTableIF tyTable = scope.getTypeTable();
		TypeIF tipe;
		//Obtengo el nombre del identificador del tipo.
		String nombre_tipo = ((TokenIF) id).getLexema();
		//Copmpruebo que no exista ya un tipo con este nombre.
		if(scope.getScopeManager().containsType(nombre_tipo)){
			throw new RuntimeException("Ya existe un tipo de usuario creado con el nombre: " + nombre_tipo);
		}
		//Obtengo tipo simple que forma parte del compuesto del usuario.
		if(!scope.getScopeManager().containsType((String) tipo)){
			if(tipo.equals("entero")){
				tipe = new TypeSimple(scope, "entero");
				tyTable.addType(tipe);
			} else if(tipo.equals("boolean")){
				tipe = new TypeSimple(scope, "boolean");
				tyTable.addType(tipe);
			} else {
				throw new RuntimeException("Los tipos compuestos sólo pueden estar formados por tipos enteros o lógicos");
			}
		} else {
			tipe = tyTable.getType((String) tipo);
		}
		//Calculo el rango del tipo declarado
		int rango = (int) rango_sup - (int) rango_inf;
		//Instancio el  nuevo tipo y lo añado a la tabla de tipos.
		TypeArray tipo_usuario = new TypeArray(scope, nombre_tipo);
		//Seteo el rango del tipo añadido y de su tipo base.
		tipo_usuario.setRango(rango);
		tipo_usuario.setTypeSimple(tipe);
		tyTable.addType(tipo_usuario);
		System.out.println("Vector de tipo " + nombre_tipo + " de rango " + rango + " de tipo simple " + tipe.getName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionconstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionconstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionconstantes ::= BCONSTANTES defconstantes 
            {
              Object RESULT =null;
		System.out.println("Sección de constantes analizada");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionconstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valorconstante ::= NUM 
            {
              Object RESULT =null;
		
		System.out.println("Analizando declaración de constante aritmética");
		PrimitivaAritmetica primitiva = new PrimitivaAritmetica(null,null,null);
		RESULT= primitiva;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valorconstante ::= CIERTO 
            {
              Object RESULT =null;
		
		System.out.println("Analizando declaración de constante lógica cierta");
		PrimitivaLogica primitiva = new PrimitivaLogica(null, null, null);
		RESULT= primitiva;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valorconstante ::= FALSO 
            {
              Object RESULT =null;
		
		System.out.println("Analizando declaración de constante lógica falsa");
		PrimitivaLogica primitiva = new PrimitivaLogica(null, null, null);
		RESULT= primitiva;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defconstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defconstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defconstantes ::= IDEN ASIGNACION valorconstante DSENTENCIAS defconstantes 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
		System.out.println("Empezando a analizar línea de constante");
		//Obtengo el escope y la tabla de simbolos y de tipòs.
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		TypeTableIF tyTable = scope.getTypeTable();
		TypeIF tipe;
		//Obtengo el nombre de la constante.
		String nombre_constante = ((TokenIF) id).getLexema();
		//Dependiendo de si es entera o lógica añado la constante a la tabla de simbolos.
		if(valor instanceof PrimitivaAritmetica){
			if(syTable.containsSymbol(nombre_constante)){
				throw new RuntimeException("Ya existe una constante en este ámbito con el mismo nombre: " + nombre_constante);
			}
			//Compruebo que el tipo haya sido creado con anterioridad, en caso contrario lo creo y lo instancio.
			if(!scope.getScopeManager().containsType("entero")){
				tipe = new TypeSimple(scope, "entero");
				tyTable.addType(tipe);
			} else {
				//En caso contrario lo obtengo de la propia tabla de tipos.
				tipe = tyTable.getType("entero");
			}	
			SymbolConstant constante = new SymbolConstant(scope, nombre_constante, tipe);
			syTable.addSymbol(nombre_constante, constante);
		} else if (valor instanceof PrimitivaLogica){
			if(syTable.containsSymbol(nombre_constante)){
				throw new RuntimeException("Ya existe una constante en este ámbito con el mismo nombre: " + nombre_constante);
			}
			//Compruebo que el tipo haya sido creado con anterioridad, en caso contrario lo creo y lo instancio.
			if(!scope.getScopeManager().containsType("boolean")){
				tipe = new TypeSimple(scope, "boolean");
				tyTable.addType(tipe);
			} else {
				//En caso contrario lo obtengo de la propia tabla de tipos.
				tipe = tyTable.getType("boolean");
			}	
			SymbolConstant constante = new SymbolConstant(scope, nombre_constante, tipe);
			syTable.addSymbol(nombre_constante, constante);
		} else
			throw new RuntimeException("Las constantes sólo pueden ser enteras o lógicas");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defconstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= NT$1 defprincipal 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Axiom RESULT =null;

		System.out.println("Iniciando análisis programa principal");
		scopeManager.openScope("Principal");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

