
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 27 20:58:09 CET 2021
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 27 20:58:09 CET 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\062\002\000\002\002" +
    "\004\000\002\063\002\000\002\003\004\000\002\004\002" +
    "\000\002\005\007\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\007\003\000\002\010\016\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\004\000\002\013\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\025\003\000\002\064\002\000\002\065\002\000\002\014" +
    "\011\000\002\014\003\000\002\066\002\000\002\016\006" +
    "\000\002\016\003\000\002\016\003\000\002\017\004\000" +
    "\002\017\003\000\002\021\003\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\034\021\000\002\035" +
    "\023\000\002\036\003\000\002\036\003\000\002\020\004" +
    "\000\002\020\003\000\002\023\004\000\002\023\003\000" +
    "\002\024\015\000\002\026\005\000\002\026\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\005\000\002\027\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\031\004\000\002" +
    "\031\003\000\002\032\005\000\002\032\005\000\002\033" +
    "\006\000\002\041\003\000\002\041\003\000\002\042\006" +
    "\000\002\060\003\000\002\037\003\000\002\040\006\000" +
    "\002\061\004\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\047\004\000" +
    "\002\047\003\000\002\050\004\000\002\050\003\000\002" +
    "\051\013\000\002\052\013\000\002\054\005\000\002\054" +
    "\003\000\002\053\005\000\002\053\003\000\002\055\015" +
    "\000\002\056\015\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\007\000\002\057\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\004\011\000\001\002\000\004\002\355\001" +
    "\002\000\004\011\ufffe\001\002\000\004\011\011\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffd\001\002\000" +
    "\004\024\012\001\002\000\004\052\013\001\002\000\014" +
    "\027\ufffc\041\ufffc\042\ufffc\045\015\050\ufffc\001\002\000" +
    "\012\027\ufffc\041\ufffc\042\031\050\ufffc\001\002\000\014" +
    "\024\020\027\ufffc\041\ufffc\042\ufffc\050\ufffc\001\002\000" +
    "\012\027\ufff5\041\ufff5\042\ufff5\050\ufff5\001\002\000\012" +
    "\027\ufff6\041\ufff6\042\ufff6\050\ufff6\001\002\000\004\055" +
    "\022\001\002\000\012\027\ufffa\041\ufffa\042\ufffa\050\ufffa" +
    "\001\002\000\010\031\026\035\024\047\023\001\002\000" +
    "\004\053\ufff7\001\002\000\004\053\ufff8\001\002\000\004" +
    "\053\027\001\002\000\004\053\ufff9\001\002\000\014\024" +
    "\020\027\ufffc\041\ufffc\042\ufffc\050\ufffc\001\002\000\012" +
    "\027\ufffb\041\ufffb\042\ufffb\050\ufffb\001\002\000\012\024" +
    "\340\027\ufffc\041\ufffc\050\ufffc\001\002\000\010\027\035" +
    "\041\ufffc\050\ufffc\001\002\000\010\027\uffec\041\uffec\050" +
    "\uffec\001\002\000\006\041\063\050\ufffc\001\002\000\012" +
    "\024\uffe7\041\ufffc\050\ufffc\052\uffe7\001\002\000\006\041" +
    "\uffde\050\uffde\001\002\000\006\024\044\052\ufffc\001\002" +
    "\000\006\041\uffdf\050\uffdf\001\002\000\010\034\uffe4\041" +
    "\uffe4\050\uffe4\001\002\000\004\052\051\001\002\000\010" +
    "\034\uffe1\043\uffe3\052\uffe1\001\002\000\010\034\uffe8\043" +
    "\uffe8\052\uffe8\001\002\000\006\034\uffe0\052\uffe0\001\002" +
    "\000\004\043\047\001\002\000\010\024\044\034\ufffc\052" +
    "\ufffc\001\002\000\006\034\uffe2\052\uffe2\001\002\000\010" +
    "\012\055\016\054\024\052\001\002\000\016\024\uffe9\034" +
    "\uffe9\041\uffe9\050\uffe9\052\uffe9\053\uffe9\001\002\000\016" +
    "\024\ufffc\034\ufffc\041\ufffc\050\ufffc\052\ufffc\053\056\001" +
    "\002\000\016\024\uffeb\034\uffeb\041\uffeb\050\uffeb\052\uffeb" +
    "\053\uffeb\001\002\000\016\024\uffea\034\uffea\041\uffea\050" +
    "\uffea\052\uffea\053\uffea\001\002\000\014\024\uffdd\034\uffdd" +
    "\041\uffdd\050\uffdd\052\uffdd\001\002\000\014\024\uffe6\034" +
    "\uffe6\041\uffe6\050\uffe6\052\uffe6\001\002\000\014\024\uffdc" +
    "\034\uffdc\041\uffdc\050\uffdc\052\uffdc\001\002\000\014\024" +
    "\uffe7\034\ufffc\041\ufffc\050\ufffc\052\uffe7\001\002\000\010" +
    "\034\uffe5\041\uffe5\050\uffe5\001\002\000\010\014\223\022" +
    "\221\050\ufffc\001\002\000\004\050\066\001\002\000\004" +
    "\050\uffd2\001\002\000\014\013\ufffc\015\067\017\074\024" +
    "\073\046\075\001\002\000\004\024\207\001\002\000\016" +
    "\013\uffb6\015\uffb6\017\uffb6\024\uffb6\026\uffb6\046\uffb6\001" +
    "\002\000\004\013\205\001\002\000\016\013\ufffc\015\067" +
    "\017\074\024\073\026\ufffc\046\075\001\002\000\010\021" +
    "\147\033\146\055\uffbd\001\002\000\020\007\124\021\115" +
    "\024\114\031\111\033\117\035\112\047\110\001\002\000" +
    "\004\033\161\001\002\000\004\055\107\001\002\000\016" +
    "\013\uffb3\015\uffb3\017\uffb3\024\uffb3\026\uffb3\046\uffb3\001" +
    "\002\000\016\013\uffb4\015\uffb4\017\uffb4\024\uffb4\026\uffb4" +
    "\046\uffb4\001\002\000\016\013\uffb5\015\uffb5\017\uffb5\024" +
    "\uffb5\026\uffb5\046\uffb5\001\002\000\004\053\106\001\002" +
    "\000\006\013\uffaa\026\uffaa\001\002\000\004\055\uffbc\001" +
    "\002\000\016\013\uffb2\015\uffb2\017\uffb2\024\uffb2\026\uffb2" +
    "\046\uffb2\001\002\000\020\010\uffb7\013\uffb7\015\uffb7\017" +
    "\uffb7\024\uffb7\026\uffb7\046\uffb7\001\002\000\020\007\124" +
    "\021\115\024\114\031\111\033\117\035\112\047\110\001" +
    "\002\000\030\004\uffc9\006\uffc9\023\uffc9\025\uffc9\034\uffc9" +
    "\037\uffc9\040\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\001" +
    "\002\000\030\004\uffcb\006\uffcb\023\uffcb\025\uffcb\034\uffcb" +
    "\037\uffcb\040\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\001" +
    "\002\000\030\004\uffcc\006\uffcc\023\uffcc\025\uffcc\034\uffcc" +
    "\037\uffcc\040\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\001" +
    "\002\000\004\053\160\001\002\000\034\004\uffce\006\uffce" +
    "\021\147\023\uffce\025\uffce\033\146\034\uffce\037\uffce\040" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\001\002\000\020" +
    "\007\124\021\115\024\114\031\111\033\117\035\112\047" +
    "\110\001\002\000\030\004\uffc1\006\uffc1\023\uffc1\025\uffc1" +
    "\034\uffc1\037\uffc1\040\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\001\002\000\020\007\124\021\115\024\114\031\111" +
    "\033\117\035\112\047\110\001\002\000\016\025\133\037" +
    "\134\040\131\051\130\053\uffba\054\132\001\002\000\030" +
    "\004\uffc3\006\uffc3\023\uffc3\025\uffc3\034\uffc3\037\uffc3\040" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\001\002\000\030" +
    "\004\uffc6\006\uffc6\023\uffc6\025\uffc6\034\uffc6\037\uffc6\040" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\001\002\000\030" +
    "\004\uffc8\006\uffc8\023\uffc8\025\uffc8\034\uffc8\037\uffc8\040" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\001\002\000\020" +
    "\007\124\021\115\024\114\031\111\033\117\035\112\047" +
    "\110\001\002\000\030\004\uffcd\006\uffcd\023\uffcd\025\uffcd" +
    "\034\uffcd\037\uffcd\040\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\001\002\000\030\004\uffca\006\uffca\023\uffca\025\uffca" +
    "\034\uffca\037\uffca\040\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\001\002\000\030\004\uffc2\006\uffc2\023\uffc2\025\uffc2" +
    "\034\uffc2\037\uffc2\040\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\001\002\000\020\007\124\021\115\024\114\031\111" +
    "\033\117\035\112\047\110\001\002\000\020\007\124\021" +
    "\115\024\114\031\111\033\117\035\112\047\110\001\002" +
    "\000\020\007\124\021\115\024\114\031\111\033\117\035" +
    "\112\047\110\001\002\000\020\007\124\021\115\024\114" +
    "\031\111\033\117\035\112\047\110\001\002\000\020\007" +
    "\124\021\115\024\114\031\111\033\117\035\112\047\110" +
    "\001\002\000\030\004\uffc4\006\uffc4\023\uffc4\025\uffc4\034" +
    "\uffc4\037\uffc4\040\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\001\002\000\030\004\uffcf\006\uffcf\023\uffcf\025\uffcf\034" +
    "\uffcf\037\uffcf\040\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\001\002\000\030\004\uffd0\006\uffd0\023\uffd0\025\uffd0\034" +
    "\uffd0\037\uffd0\040\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\001\002\000\030\004\uffc7\006\uffc7\023\uffc7\025\uffc7\034" +
    "\uffc7\037\uffc7\040\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
    "\001\002\000\030\004\uffc5\006\uffc5\023\uffc5\025\uffc5\034" +
    "\uffc5\037\uffc5\040\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\001\002\000\016\025\133\034\143\037\134\040\131\051" +
    "\130\054\132\001\002\000\030\004\uffc0\006\uffc0\023\uffc0" +
    "\025\uffc0\034\uffc0\037\uffc0\040\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\001\002\000\016\023\145\025\133\037\134" +
    "\040\131\051\130\054\132\001\002\000\030\004\uffbf\006" +
    "\uffbf\023\uffbf\025\uffbf\034\uffbf\037\uffbf\040\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\001\002\000\006\024\044\034" +
    "\ufffc\001\002\000\006\024\153\047\150\001\002\000\006" +
    "\004\ufff0\023\ufff0\001\002\000\006\004\uffee\023\uffee\001" +
    "\002\000\004\023\154\001\002\000\010\004\uffef\021\147" +
    "\023\uffef\001\002\000\032\004\uffbe\006\uffbe\023\uffbe\025" +
    "\uffbe\034\uffbe\037\uffbe\040\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\001\002\000\004\034\uffb9\001\002\000" +
    "\004\034\157\001\002\000\030\004\uffb8\006\uffb8\023\uffb8" +
    "\025\uffb8\034\uffb8\037\uffb8\040\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\001\002\000\020\010\uffbb\013\uffbb\015\uffbb" +
    "\017\uffbb\024\uffbb\026\uffbb\046\uffbb\001\002\000\024\007" +
    "\124\021\115\024\114\030\162\031\111\033\117\034\ufffc" +
    "\035\112\047\110\001\002\000\004\034\uff9f\001\002\000" +
    "\016\025\133\034\uff9e\037\134\040\131\051\130\054\132" +
    "\001\002\000\004\034\166\001\002\000\004\034\uff9d\001" +
    "\002\000\004\053\167\001\002\000\020\010\uff9c\013\uff9c" +
    "\015\uff9c\017\uff9c\024\uff9c\026\uff9c\046\uff9c\001\002\000" +
    "\016\006\171\025\133\037\134\040\131\051\130\054\132" +
    "\001\002\000\004\052\172\001\002\000\016\013\ufffc\015" +
    "\067\017\074\024\073\026\ufffc\046\075\001\002\000\006" +
    "\013\ufffc\026\175\001\002\000\004\013\201\001\002\000" +
    "\004\052\177\001\002\000\004\013\uffa2\001\002\000\014" +
    "\013\ufffc\015\067\017\074\024\073\046\075\001\002\000" +
    "\004\013\uffa3\001\002\000\004\017\202\001\002\000\004" +
    "\053\203\001\002\000\016\013\uffa7\015\uffa7\017\uffa7\024" +
    "\uffa7\026\uffa7\046\uffa7\001\002\000\006\013\uffab\026\uffab" +
    "\001\002\000\004\044\206\001\002\000\004\002\uffd1\001" +
    "\002\000\004\036\210\001\002\000\020\007\124\021\115" +
    "\024\114\031\111\033\117\035\112\047\110\001\002\000" +
    "\016\004\212\025\133\037\134\040\131\051\130\054\132" +
    "\001\002\000\020\007\124\021\115\024\114\031\111\033" +
    "\117\035\112\047\110\001\002\000\016\025\133\037\134" +
    "\040\131\051\130\052\214\054\132\001\002\000\014\013" +
    "\ufffc\015\067\017\074\024\073\046\075\001\002\000\004" +
    "\013\216\001\002\000\004\015\217\001\002\000\004\053" +
    "\220\001\002\000\016\013\uffa1\015\uffa1\017\uffa1\024\uffa1" +
    "\026\uffa1\046\uffa1\001\002\000\004\024\247\001\002\000" +
    "\010\014\uffd7\022\uffd7\050\uffd7\001\002\000\004\024\231" +
    "\001\002\000\004\050\uffd3\001\002\000\010\014\uffd6\022" +
    "\uffd6\050\uffd6\001\002\000\010\014\223\022\221\050\ufffc" +
    "\001\002\000\004\050\uffd4\001\002\000\004\050\uffd5\001" +
    "\002\000\004\033\232\001\002\000\010\024\uffe7\034\ufffc" +
    "\052\uffe7\001\002\000\004\034\234\001\002\000\004\052" +
    "\235\001\002\000\014\027\ufffc\041\ufffc\042\ufffc\045\015" +
    "\050\ufffc\001\002\000\012\027\ufffc\041\ufffc\042\031\050" +
    "\ufffc\001\002\000\010\027\035\041\ufffc\050\ufffc\001\002" +
    "\000\006\041\063\050\ufffc\001\002\000\004\050\242\001" +
    "\002\000\012\015\067\017\074\024\073\046\075\001\002" +
    "\000\014\013\ufffc\015\067\017\074\024\073\046\075\001" +
    "\002\000\004\013\245\001\002\000\004\053\246\001\002" +
    "\000\010\014\uffd9\022\uffd9\050\uffd9\001\002\000\004\033" +
    "\250\001\002\000\010\024\uffe7\034\ufffc\052\uffe7\001\002" +
    "\000\004\034\252\001\002\000\004\052\253\001\002\000" +
    "\010\012\260\016\257\024\255\001\002\000\004\052\261" +
    "\001\002\000\004\052\uffdb\001\002\000\004\052\uffda\001" +
    "\002\000\006\052\ufff2\053\ufff2\001\002\000\006\052\ufff1" +
    "\053\ufff1\001\002\000\014\027\ufffc\041\ufffc\042\ufffc\045" +
    "\015\050\ufffc\001\002\000\012\027\ufffc\041\ufffc\042\031" +
    "\050\ufffc\001\002\000\010\027\035\041\ufffc\050\ufffc\001" +
    "\002\000\006\041\063\050\ufffc\001\002\000\004\050\266" +
    "\001\002\000\014\010\277\015\267\017\272\024\073\046" +
    "\075\001\002\000\004\024\325\001\002\000\020\010\uffaf" +
    "\013\uffaf\015\uffaf\017\uffaf\024\uffaf\026\uffaf\046\uffaf\001" +
    "\002\000\020\010\uffb1\013\uffb1\015\uffb1\017\uffb1\024\uffb1" +
    "\026\uffb1\046\uffb1\001\002\000\020\007\124\021\115\024" +
    "\114\031\111\033\117\035\112\047\110\001\002\000\020" +
    "\010\uffac\013\uffac\015\uffac\017\uffac\024\uffac\026\uffac\046" +
    "\uffac\001\002\000\020\010\uffb0\013\uffb0\015\uffb0\017\uffb0" +
    "\024\uffb0\026\uffb0\046\uffb0\001\002\000\020\010\uffae\013" +
    "\uffae\015\uffae\017\uffae\024\uffae\026\uffae\046\uffae\001\002" +
    "\000\016\010\277\013\ufffc\015\267\017\272\024\073\046" +
    "\075\001\002\000\020\007\124\021\115\024\114\031\111" +
    "\033\117\035\112\047\110\001\002\000\020\010\uffad\013" +
    "\uffad\015\uffad\017\uffad\024\uffad\026\uffad\046\uffad\001\002" +
    "\000\016\025\133\037\134\040\131\051\130\053\302\054" +
    "\132\001\002\000\020\010\uff9b\013\uff9b\015\uff9b\017\uff9b" +
    "\024\uff9b\026\uff9b\046\uff9b\001\002\000\004\013\307\001" +
    "\002\000\020\010\277\013\ufffc\015\267\017\272\024\073" +
    "\026\ufffc\046\075\001\002\000\006\013\uffa8\026\uffa8\001" +
    "\002\000\006\013\uffa9\026\uffa9\001\002\000\004\053\310" +
    "\001\002\000\010\014\uffd8\022\uffd8\050\uffd8\001\002\000" +
    "\016\006\312\025\133\037\134\040\131\051\130\054\132" +
    "\001\002\000\004\052\313\001\002\000\020\010\277\013" +
    "\ufffc\015\267\017\272\024\073\026\ufffc\046\075\001\002" +
    "\000\006\013\ufffc\026\315\001\002\000\004\052\323\001" +
    "\002\000\004\013\320\001\002\000\004\013\uffa4\001\002" +
    "\000\004\017\321\001\002\000\004\053\322\001\002\000" +
    "\020\010\uffa6\013\uffa6\015\uffa6\017\uffa6\024\uffa6\026\uffa6" +
    "\046\uffa6\001\002\000\016\010\277\013\ufffc\015\267\017" +
    "\272\024\073\046\075\001\002\000\004\013\uffa5\001\002" +
    "\000\004\036\326\001\002\000\020\007\124\021\115\024" +
    "\114\031\111\033\117\035\112\047\110\001\002\000\016" +
    "\004\330\025\133\037\134\040\131\051\130\054\132\001" +
    "\002\000\020\007\124\021\115\024\114\031\111\033\117" +
    "\035\112\047\110\001\002\000\016\025\133\037\134\040" +
    "\131\051\130\052\332\054\132\001\002\000\016\010\277" +
    "\013\ufffc\015\267\017\272\024\073\046\075\001\002\000" +
    "\004\013\334\001\002\000\004\015\335\001\002\000\004" +
    "\053\336\001\002\000\020\010\uffa0\013\uffa0\015\uffa0\017" +
    "\uffa0\024\uffa0\026\uffa0\046\uffa0\001\002\000\010\027\uffed" +
    "\041\uffed\050\uffed\001\002\000\004\055\342\001\002\000" +
    "\010\027\ufff3\041\ufff3\050\ufff3\001\002\000\004\020\343" +
    "\001\002\000\004\021\344\001\002\000\006\024\153\047" +
    "\150\001\002\000\004\004\346\001\002\000\006\024\153" +
    "\047\150\001\002\000\004\023\350\001\002\000\004\005" +
    "\351\001\002\000\006\012\260\016\257\001\002\000\004" +
    "\053\353\001\002\000\012\024\340\027\ufffc\041\ufffc\050" +
    "\ufffc\001\002\000\010\027\ufff4\041\ufff4\050\ufff4\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\006\002\003\062\004\001\001\000\002\001" +
    "\001\000\006\003\006\063\005\001\001\000\004\024\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\015\007\013\001\001" +
    "\000\006\004\032\013\031\001\001\000\006\004\020\005" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\020\005\027\001\001\000\002\001" +
    "\001\000\006\004\340\010\336\001\001\000\006\004\035" +
    "\017\033\001\001\000\002\001\001\000\006\004\064\023" +
    "\063\001\001\000\010\004\040\014\037\064\036\001\001" +
    "\000\002\001\001\000\010\004\044\016\041\025\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\044\016\047\025\042" +
    "\001\001\000\002\001\001\000\004\015\052\001\001\000" +
    "\002\001\001\000\006\004\057\021\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\060\001\001\000\002\001\001\000\010\004\040\014\061" +
    "\064\036\001\001\000\002\001\001\000\014\004\226\020" +
    "\223\034\221\035\224\036\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\102\033\103\040\101\041" +
    "\075\042\067\044\076\045\071\047\070\051\100\055\077" +
    "\061\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\102\033\103\040\101\041\075" +
    "\042\067\044\076\045\071\047\203\051\100\055\077\061" +
    "\104\001\001\000\002\001\001\000\020\026\167\027\122" +
    "\030\121\031\120\032\115\033\125\040\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\026\117\027\122\030\121\031\120\032\115\033" +
    "\125\040\124\060\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\026\143\027\122\030\121\031\120\032\115" +
    "\033\125\040\124\001\001\000\002\001\001\000\020\026" +
    "\141\027\122\030\121\031\120\032\115\033\125\040\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\026\126\027\122\030\121" +
    "\031\120\032\115\033\125\040\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\026\140" +
    "\027\122\030\121\031\120\032\115\033\125\040\124\001" +
    "\001\000\020\026\137\027\122\030\121\031\120\032\115" +
    "\033\125\040\124\001\001\000\020\026\136\027\122\030" +
    "\121\031\120\032\115\033\125\040\124\001\001\000\020" +
    "\026\135\027\122\030\121\031\120\032\115\033\125\040" +
    "\124\001\001\000\020\026\134\027\122\030\121\031\120" +
    "\032\115\033\125\040\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\044\016\154\025\042" +
    "\037\155\001\001\000\006\012\151\033\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\164" +
    "\026\162\027\122\030\121\031\120\032\115\033\125\040" +
    "\124\043\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\102\033\103\040\101\041\075\042\067\044\076\045" +
    "\071\047\172\051\100\055\077\061\104\001\001\000\006" +
    "\004\175\053\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\102\033\103\040\101" +
    "\041\075\042\067\044\076\045\071\047\177\051\100\055" +
    "\077\061\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\026\210\027\122\030\121\031\120\032\115\033\125\040" +
    "\124\001\001\000\002\001\001\000\020\026\212\027\122" +
    "\030\121\031\120\032\115\033\125\040\124\001\001\000" +
    "\002\001\001\000\030\004\102\033\103\040\101\041\075" +
    "\042\067\044\076\045\071\047\214\051\100\055\077\061" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\226\020\227\034\221\035\224\036\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\040\014\232\064\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\015\007\235\001\001" +
    "\000\006\004\032\013\236\001\001\000\006\004\035\017" +
    "\237\001\001\000\006\004\064\023\240\001\001\000\002" +
    "\001\001\000\024\033\103\040\101\041\075\042\067\044" +
    "\076\045\242\051\100\055\077\061\104\001\001\000\030" +
    "\004\102\033\103\040\101\041\075\042\067\044\076\045" +
    "\071\047\243\051\100\055\077\061\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\040\014\250\064\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\255\022\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\007" +
    "\261\001\001\000\006\004\032\013\262\001\001\000\006" +
    "\004\035\017\263\001\001\000\006\004\064\023\264\001" +
    "\001\000\002\001\001\000\026\033\103\040\101\041\075" +
    "\042\270\044\274\046\275\052\273\056\267\057\272\061" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\026\310\027\122\030\121\031\120\032" +
    "\115\033\125\040\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\304\033\103\040" +
    "\101\041\075\042\270\044\274\046\303\050\302\052\273" +
    "\056\267\057\272\061\277\001\001\000\020\026\300\027" +
    "\122\030\121\031\120\032\115\033\125\040\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\304\033\103\040\101\041\075" +
    "\042\270\044\274\046\303\050\305\052\273\056\267\057" +
    "\272\061\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\304\033\103\040\101\041\075" +
    "\042\270\044\274\046\303\050\313\052\273\056\267\057" +
    "\272\061\277\001\001\000\006\004\316\054\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\304\033\103\040\101\041\075\042\270\044\274\046" +
    "\303\050\323\052\273\056\267\057\272\061\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\026\326\027" +
    "\122\030\121\031\120\032\115\033\125\040\124\001\001" +
    "\000\002\001\001\000\020\026\330\027\122\030\121\031" +
    "\120\032\115\033\125\040\124\001\001\000\002\001\001" +
    "\000\032\004\304\033\103\040\101\041\075\042\270\044" +
    "\274\046\303\050\332\052\273\056\267\057\272\061\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\344\033\150\001\001\000\002\001\001\000\006" +
    "\012\346\033\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\351\001\001\000\002\001\001\000\006" +
    "\004\340\010\353\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentenciaDevolver ::= FRETURN expresion DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaDevolver",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentenciaEscribir ::= ESCRIBIR PIZQUIERDO parametroEscribir PDERECHO DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametroEscribir ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametroEscribir ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametroEscribir ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroEscribir",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentenciaforFuncion ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentenciasFuncion FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaforFuncion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentenciafor ::= COMIENZOBUCLEPARA IDEN RANGOBUCLEPARA expresion RANGO expresion DELIMFUNC listaSentencias FINBLOQUESENTENCIAS COMIENZOBUCLEPARA DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciafor",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // rellenoif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // rellenoif ::= ALTERNATIVASI DELIMFUNC listaSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoif",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // rellenoifFuncion ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoifFuncion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // rellenoifFuncion ::= ALTERNATIVASI DELIMFUNC listaSentenciasFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rellenoifFuncion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenciaifFuncion ::= COMIENZOSI expresion STARTIF DELIMFUNC listaSentenciasFuncion rellenoifFuncion FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaifFuncion",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenciaif ::= COMIENZOSI expresion STARTIF DELIMFUNC listaSentencias rellenoif FINBLOQUESENTENCIAS COMIENZOSI DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaif",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listaSentenciasFuncion ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listaSentenciasFuncion ::= sentenciaFuncion listaSentenciasFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasFuncion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listaSentencias ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listaSentencias ::= sentencia listaSentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentenciaFuncion ::= sentenciaDevolver 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentenciaFuncion ::= sentenciallamadafuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentenciaFuncion ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentenciaFuncion ::= sentenciaforFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentenciaFuncion ::= sentenciaifFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaFuncion ::= sentenciadeasignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaFuncion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= sentenciallamadafuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= sentenciafor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= sentenciaif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= sentenciadeasignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciallamadafuncion ::= llamadafuncion DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciallamadafuncion",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // llamadafuncion ::= IDEN PIZQUIERDO parametrofuncionoproc PDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadafuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametrofuncionoproc ::= listavariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrofuncionoproc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametroasignacion ::= expresion 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Obteniendo expresión de sentencia de asignación");
		RESULT = ex;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroasignacion",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciadeasignacion ::= parteizquierdaasignacion ASIGNACION parametroasignacion DSENTENCIAS 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		System.out.println("Empezando a analizar asignación");
		System.out.println("El tipo de la expresión derecha es: " + ((Expresion) pd).getType());
		//Compruebo si concuerdan los tipos de la parte izquierda y derecha y qué tipòs son, según sea seteo la SentenciaAsignacion.
		if(( ((SymbolIF) pi).getType().getName().equals("entero") && ((Expresion) pd).getType().equals("entero"))){
			SentenciaAsignacion asign = new SentenciaAsignacion(pi, pd, "entero");
			System.out.println("Sentencia de asignación entera analizada");
			RESULT = asign;
		} else if(((SymbolIF) pi).getType().getName().equals("boolean") && ((Expresion) pd).getType().equals("boolean")){
			SentenciaAsignacion asign = new SentenciaAsignacion(pi,pd,"boolean");
			System.out.println("Sentencia de asignación booleana analizada");
			RESULT = asign;
		} else
			throw new RuntimeException("No se puede asignar a una variable de tipo " + ((SymbolIF) pi).getType().getName() + " una expresión de tipo " + ((Expresion) pd).getType());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciadeasignacion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parteizquierdaasignacion ::= miembrovector 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Obteniendo parte vectorial izquierda de asignación");
		RESULT = mv;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteizquierdaasignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parteizquierdaasignacion ::= IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Obteniendo parte izquierda de asignación");
		//Hay que obtener el símbolo relacionado a IDEN
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String lexema = ((TokenIF) id).getLexema();
		SymbolIF identificador;
		//Compruebo y obtengo el sombolo del identificador.
		if(syTable.containsSymbol(lexema)){
			identificador = syTable.getSymbol(((TokenIF) id).getLexema());
			System.out.println("Variable encontrada en la tabla de símbolos de tipo: " + identificador.getType().getName());
		}
		else
			throw new RuntimeException("No existe ningún símbolo con nombre " + lexema);
		//Compruebo si el identificador corresponde a una variable.
		if(identificador.getClass().getSimpleName().equals("SymbolVariable")){
			RESULT = identificador;
		} else
			throw new RuntimeException("No se puede utilizar en una sentencia de asignación un símbolo de tipo: " + identificador.getClass().getName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteizquierdaasignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // miembrovector ::= IDEN CIZQUIERDO valorango CDERECHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("miembrovector",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresionlvl5 ::= CIZQUIERDO expresion CDERECHO 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = va;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresionlvl5 ::= PIZQUIERDO expresion PDERECHO 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = va;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresionlvl4 ::= expresionlvl5 
            {
              Object RESULT =null;
		int lvl5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvl5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lvl5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = lvl5;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresionlvl4 ::= NOLOGICO expresion 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Compruebo que la expresión sea bien lógica o bien primitiva lógica.
		if((vd instanceof ExpresionLogica) ||	(vd instanceof PrimitivaLogica)){
			//En dicho caso creo la expresión aritmética.
			ExpresionLogica logica = new ExpresionLogica(null, "!", (Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("Una expresión de tipo " + ( (Expresion) vd).getClass().getSimpleName() + " no puede ser parte de una expresión lógica de negación.");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl4",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresionlvl3 ::= expresionlvl4 
            {
              Object RESULT =null;
		int lvl4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvl4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lvl4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = lvl4;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresionlvl3 ::= expresion PRODUCTO expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
		//ScopeIF scope = scopeManager.getCurrentScope();
		//SymbolTableIF syTable = scope.getSymbolTable();
		if(((vi instanceof ExpresionAritmetica) ||(vi instanceof PrimitivaAritmetica)) && ((vd instanceof ExpresionAritmetica) ||	(vd instanceof PrimitivaAritmetica))){
			//En dicho caso creo la expresión aritmética.
			ExpresionAritmetica logica = new ExpresionAritmetica((Expresion) vi, "+", (Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("No se pueden mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresionlvl3 ::= expresion YLOGICA expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Compruebo que ambas expresiones son o bien lógicas o bien primitivas lógicas.
		if(((vi instanceof ExpresionLogica) ||(vi instanceof PrimitivaLogica)) && ((vd instanceof ExpresionLogica) ||	(vd instanceof PrimitivaLogica))){
			//En dicho caso creo la expresión aritmética.
			ExpresionLogica logica = new ExpresionLogica((Expresion) vi, "&&", (Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("No se pueden mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionlvl2 ::= expresionlvl3 
            {
              Object RESULT =null;
		int lvl3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvl3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lvl3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = lvl3;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresionlvl2 ::= expresion SUMA expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
		//ScopeIF scope = scopeManager.getCurrentScope();
		//SymbolTableIF syTable = scope.getSymbolTable();
		
		//Compruebo que ambas expresiones son o bien aritméticas o bien primitivas aritméticas.
		if(((vi instanceof ExpresionAritmetica) ||(vi instanceof PrimitivaAritmetica)) && ((vd instanceof ExpresionAritmetica) ||	(vd instanceof PrimitivaAritmetica))){
			//En dicho caso creo la expresión aritmética.
			RESULT= new ExpresionAritmetica((Expresion) vi, "+", (Expresion) vd);
		}
		else
			throw new RuntimeException("No se pueden mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionlvl2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresionlvl2 
            {
              Object RESULT =null;
		int lvl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lvl2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Simplemente devuelvo la expresión hasta el momento.
		RESULT = lvl2;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= NUM 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Creo la primitiva, le seteo su valor y la devuelvo.
		PrimitivaAritmetica numero = new PrimitivaAritmetica(null, null, null);
		numero.setValor(Integer.parseInt(((TokenIF) num).getLexema()));
		RESULT = numero;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= miembrovector 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Hay que obtener el vector relacionado con miembroVector
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String lexema = ((TokenIF) v).getLexema();
		SymbolIF vector;
		//Compruebo y obtengo el vector de la tabla de símbolos.
		if(syTable.containsSymbol(lexema)){
			vector = syTable.getSymbol(lexema);
		}
		else
			throw new RuntimeException("No existe ningún vector con nombre " + lexema);
		//Según el tipo del vector creo un tipo de expresión u otra. TODO IMPLEMENTACION getName() en TypeArray.
		Expresion primitiva;
		switch(vector.getType().getName()){
			case "entero":
				//Creo una PrimitivaAritmetica.
				primitiva = new PrimitivaAritmetica(null,null,null);
				//primitiva.setValor(Integer.parseInt(vector.getValue()));
				RESULT = primitiva;
				break;
			case "boolean": 
				primitiva = new PrimitivaLogica(null,null,null);
				//primitiva.setValorLogico(Boolean.valueOf(vector.getValue()));
				RESULT = primitiva;
				break;
			default:
				throw new RuntimeException("Los vectores con elementos de tipo " + vector.getType().getName() + " no pueden formar parte de una expresión.");		
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= FALSO 
            {
              Object RESULT =null;
		
		//Creo una primitiva lógica y le seteo su valor false.
		PrimitivaLogica primitiva_logica = new PrimitivaLogica(null,null,null);
		primitiva_logica.setValorLogico(false);
		RESULT = primitiva_logica;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= CIERTO 
            {
              Object RESULT =null;
		
		//Creo una primitiva lógica y le seteo su valor true.
		PrimitivaLogica primitiva_logica = new PrimitivaLogica(null,null,null);
		primitiva_logica.setValorLogico(true);
		RESULT = primitiva_logica;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= llamadafuncion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Hay que obtener la función relacionada a llamadafuncion
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String lexema = ((TokenIF) f).getLexema();
		SymbolFunction funcion;
		//Compruebo y obtengo la función de la tabla de símbolos.
		if(syTable.containsSymbol(lexema)){
			funcion = (SymbolFunction) syTable.getSymbol(lexema);
		}
		else
			throw new RuntimeException("No existe ninguna función con nombre " + lexema);
		Expresion primitiva;
		//Según el tipo de la función creo un tipo de expresión u otra.
		switch(funcion.getReturn()){
			case "entero":
				//Creo una PrimitivaAritmetica.
				primitiva = new PrimitivaAritmetica(null,null,null);
				//primitiva.setValor(Integer.parseInt(funcion.getValue()));
				RESULT = primitiva;
				break;
			case "boolean": 
				//Creo una PrimitivaLogica
				primitiva = new PrimitivaLogica(null,null,null);
				//primitiva.setValorLogico(Boolean.valueOf(funcion.getValue()));
				RESULT = primitiva;
				break;
			default:
				throw new RuntimeException("Las funciones con este tipo de retorno " + funcion.getType().getName() + " no pueden formar parte de una expresión.");		
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Extrayendo identificador de parte de una expresión");
		//Hay que obtener el símbolo relacionado a IDEN
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		String lexema = ((TokenIF) id).getLexema();
		SymbolIF identificador;
		//Compruebo y obtengo el sombolo del identificador.
		if(syTable.containsSymbol(lexema)){
			identificador = syTable.getSymbol(((TokenIF) id).getLexema());
		}
		else
			throw new RuntimeException("No existe ningún símbolo con nombre " + lexema);
		//Ahora hay que determinar qué tipo de símbolo es, según el tipo habrá que ver si es compatible con ser parte de una expresión.
		Expresion primitiva;
		switch(identificador.getClass().getSimpleName()){
			case "SymbolConstant":
				if(identificador.getType().getName().equals("entero")){
					//Creo la primitiva en el caso de que el tipo de la constante sea entera.
					primitiva = new PrimitivaAritmetica(null,null,null);
					//primitiva.setValor(Integer.parseInt(identificador.getValue()));
					RESULT = primitiva;
				}
				else if(identificador.getType().getName().equals("boolean")){
					//HAY QUE IMPLEMENTAR getValue() en simbolos constantes.
					primitiva = new PrimitivaLogica(null,null,null);
					//primitiva.setValorLogico(Boolean.valueOf(identificador.getValue()));
					RESULT = primitiva;
				}
				else
					throw new RuntimeException("No se puede utilizar una constante de tipo " + identificador.getType().getName() + " como parte de una expresión aritmética o lógica, sólo está permitido enteros.");
				break;
			case "SymbolParameter":
				//TODO hasta que tenga aclarado qué es este tipo de símbolo
				break;
			case "SymbolVariable":
				if(identificador.getType().getName().equals("entero")){
					//Creo la primitiva en el caso de que el tipo de la constante sea entera.
					//Creo la primitiva en el caso de que el tipo de la constante sea entera.
					primitiva = new PrimitivaAritmetica(null,null,null); 
					//primitiva.setValor(Integer.parseInt(identificador.getValue()));
					RESULT = primitiva;
				}
				else if(identificador.getType().getName().equals("boolean")){
					//HAY QUE IMPLEMENTAR getValue() en simbolos variables.
					primitiva = new PrimitivaLogica(null,null,null);
					//primitiva.setValorLogico(Boolean.valueOf(identificador.getValue()));
					RESULT = primitiva;
				} 
				else
					throw new RuntimeException("No se puede utilizar una constante de tipo " + identificador.getType().getName() + " como parte de una expresión aritmética o lógica, sólo está permitido enteros o primitivas lógicas.");
				break;
			default:
				throw new RuntimeException("No se puede utilizar un símbolo de tipo " + identificador.getClass().getSimpleName() + " como parte de una expresión.");
		}			
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion IGUALDAD expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Analizando parte de expresión");
		//Compruebo que ambas expresiones son o bien lógicas o bien primitivas lógicas.
		if(((vi instanceof ExpresionLogica) ||(vi instanceof PrimitivaLogica)) && ((vd instanceof ExpresionLogica) ||	(vd instanceof PrimitivaLogica))){
			//En dicho caso creo la expresión aritmética.
			ExpresionLogica logica = new ExpresionLogica((Expresion) vi, "==",(Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("No se puedem mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion MENORQUE expresion 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		//Compruebo que ambas expresiones son o bien lógicas o bien primitivas lógicas.
		if(((vi instanceof ExpresionLogica) ||(vi instanceof PrimitivaLogica)) && ((vd instanceof ExpresionLogica) ||	(vd instanceof PrimitivaLogica))){
			//En dicho caso creo la expresión aritmética.
			ExpresionLogica logica = new ExpresionLogica((Expresion) vi, "<",(Expresion) vd);
			RESULT= logica;
		}
		else
			throw new RuntimeException("No se puedem mezclar tipos de expresiones: " + ((Expresion) vi).getClass().getSimpleName() + " con " + ((Expresion) vd).getClass().getSimpleName());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // defprincipal ::= COMIENZOPROGRAMA IDEN DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO listaSentencias FINBLOQUESENTENCIAS FINPROGRAMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defprincipal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // seccionsubprograma ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionsubprograma",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // seccionsubprograma ::= COMIENZOSUBPROGRAMAS defsubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionsubprograma",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // defsubprograma ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defsubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // defsubprograma ::= selectorpof defsubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defsubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // selectorpof ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorpof",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // selectorpof ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorpof",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= DECLAREFUNCION IDEN PIZQUIERDO defvariables PDERECHO DELIMFUNC tiporetornofuncion DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentenciaFuncion listaSentenciasFuncion FINBLOQUESENTENCIAS DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // procedimiento ::= COMIENZOPROCEDIMIENTO IDEN PIZQUIERDO defvariables PDERECHO DELIMFUNC seccionconstantes secciontipos seccionvariables seccionsubprograma COMIENZO sentencia listaSentencias FINBLOQUESENTENCIAS DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tiporetornofuncion ::= tipovector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiporetornofuncion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tiporetornofuncion ::= IDEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiporetornofuncion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // puntoycomaopcional ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoycomaopcional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // puntoycomaopcional ::= DSENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puntoycomaopcional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // seccionvariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionvariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // seccionvariables ::= DECLVARIABLES defvariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionvariables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listavariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listavariables ::= selectorvalororeferencia 
            {
              Object RESULT =null;
		int lexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		ListaVariables.addVariable((String) lex);
		System.out.println("Última declaración de variable analizada de la línea:" + lex);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listavariables ::= selectorvalororeferencia NT$4 DIDENTIFICADORES listavariables 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listavariables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              Object RESULT =null;
		int lexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lexright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

		//He utilizado un métoido estático para poder ir añadiendo elementos.
		ListaVariables.addVariable((String) lex);
		System.out.println("Declaración de variable analizada:" + lex);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // defvariables ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defvariables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // defvariables ::= NT$2 listavariables DELIMFUNC tipovariable puntoycomaopcional NT$3 defvariables 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defvariables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

		System.out.println("Analizando una línea de declaración de variables");
		//Obtengo el escope y la tabla de simbolos y de tipòs.
		ScopeIF scope = scopeManager.getCurrentScope();
		SymbolTableIF syTable = scope.getSymbolTable();
		TypeTableIF tyTable = scope.getTypeTable();
		//Obtengo los nombres de las variables en declaración en esta línea.
		ArrayList<String> nombre_variables = ListaVariables.getVariables();
		//Según el nombre del tipo guardo el tipo.
		TypeBase tipe;
		switch((String) tipo){
			case "entero":
				//Hay que implementar que en TypeSimple se guarde el tipo nominal según lo indicado por el constructor.
				tipe = new TypeSimple(scope, "entero");
				//En el caso de que el tipo no se haya declarado antes, lo añado a la tabla de tipos.
				if(!scope.getScopeManager().containsType("entero")){
					tyTable.addType(tipe);
				}				
				break;
			case "boolean":
				tipe = new TypeSimple(scope, "boolean");
				if(!scope.getScopeManager().containsType("boolean")){
					tyTable.addType(tipe);
				}		
				break;
			case "vector":
				//¿Donde indicar el tamaño del vector?
				tipe = new TypeArray(scope, "vector");
				if(!scope.getScopeManager().containsType("vector")){
					tyTable.addType(tipe);
				}		
				break;
			default:
				throw new RuntimeException("No se puede declarar una variable del tipo: " + tipo);
		}
		//Creo un símbolo para cada una de ellas según su tipo y nombre y la añado a la tabla de símbolos.
		for(String nombre_variable : nombre_variables){
			if(syTable.containsSymbol(nombre_variable)){
				throw new RuntimeException("Ya existe una variable en este ámbito con el mismo nombre: " + nombre_variable);
			}
			SymbolVariable variable = new SymbolVariable(scope, nombre_variable, tipe);
			syTable.addSymbol(nombre_variable, variable);
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT =null;

		System.out.println("Iniciando análisis de declaración de variables");
		//Limpio la lista de variables de la línea anterior.
		ListaVariables.clearVariables();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // selectorvalororeferencia ::= IDEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		System.out.println("Obteniedno lexema de declaración de variable: " + ((TokenIF) id).getLexema());
		String lexema = ((TokenIF) id).getLexema();
		RESULT = lexema;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectorvalororeferencia",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipovariable ::= IDEN 
            {
              Object RESULT =null;
		
		RESULT = "vector";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipovariable ::= ENTERO 
            {
              Object RESULT =null;
		
		RESULT = "entero";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipovariable ::= BOOLEANO 
            {
              Object RESULT =null;
		
		RESULT = "boolean";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovariable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // secciontipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secciontipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // secciontipos ::= COMIENZODECLTIPOS deftipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secciontipos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valorango ::= miembrovector 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valorango ::= IDEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valorango ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorango",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipovector ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovector",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipovector ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovector",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // deftipos ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // deftipos ::= IDEN ASIGNACION DECLVECTOR CIZQUIERDO valorango RANGO valorango CDERECHO ASIGNACIONVECTOR tipovector DSENTENCIAS deftipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("deftipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionconstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionconstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionconstantes ::= BCONSTANTES defconstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccionconstantes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valorconstante ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valorconstante ::= CIERTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valorconstante ::= FALSO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorconstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defconstantes ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defconstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defconstantes ::= IDEN ASIGNACION valorconstante DSENTENCIAS defconstantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("defconstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // epsilon ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= NT$1 defprincipal 
            {
              Axiom RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Axiom) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Axiom RESULT =null;

		System.out.println("Iniciando análisis programa principal");
		scopeManager.openScope("Principal");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

